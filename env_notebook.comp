#!/usr/bin/env bash
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import common bash completion
source ${HOME}/KudProject/scripts/env_common.comp

# Set up aliases
alias update="sudo su -c \"pacman -Sy && bauerbill -Syu"\"

# Export local binary path
export PATH=${HOME}/.local/bin:${PATH}

# Export ccache-backed compiler symlinks
export PATH=/usr/lib/ccache/bin:${PATH}

# Sign release kernel zip with zipsigner
function zipsigner {
    [[ -z $(command -v java) ]] && \
        echo "! Please install any of OpenJDK version before continuing." && \
        return 1

    [[ -z ${ZIPSIGNER} ]] && \
        echo "! ${BLD}ZIPSIGNER${RST} variable is empty. Refusing to continue." && \
        return 1

    [[ ${#} -lt 2 ]] && \
        echo "! ${BLD}Usage:${RST} zipsigner <unsigned-zip> <signed-zip>" && \
        return 1

    [[ ! -f ${ZIPSIGNER} ]] && \
        echo "! $(basename "${ZIPSIGNER}") doesn't exist in defined path." && \
        return 1

    [[ ! -f ${1} ]] && \
        echo "! $(basename "${1}") doesn't exist in defined path." && \
        return 1

    [[ ! -d $(dirname "${2}") ]] && \
        mkdir -p "$(dirname "${2}")"

    echo "- Signing $(basename "${1}") as $(basename "${2}")..."
    $(command -v java) -jar "${ZIPSIGNER}" "${1}" "${2}"
    if [[ ${?} -eq 0 ]]; then
        echo "i Operation has completed successfully."
    else
        STATUS=${?}
        echo "! Failed to do defined operation."
        return ${?}
    fi
}

# Repack FLAC files with maximum compression and ReplayGain applied
function flac_repack () {
    # Make sure FLAC package is installed
    [[ -z $(command -v flac) ]] && \
        echo "${BLD}flac_repack:${RST} Please install FLAC package before continuing." && \
        return 1

    # Make sure we have FLAC files to repack
    [[ $(ls | grep .flac | wc -l) -eq 0 ]] && \
        echo "${BLD}flac_repack:${RST} There's nothing to do." && \
        return 1

    # First we unpack
    flac --delete-input-file --totally-silent -d *.flac || \
        return 1

    # Then we repack with maximum compression and ReplayGain applied
    ls | egrep '\.wav|\.aiff' | while read i; do
        flac --delete-input-file --totally-silent --replay-gain -V8 "${i}" || \
            return 1
    done
}

# Convert all FLAC, WAV, and/or AIFF files to OPUS
function opus_convert () {
    # Make sure opusenc is available to execute, else ask to install opus-tools package
    [[ -z $(command -v opusenc) ]] && echo "${BLD}opus_convert:${RST} Please install opus-tools package before continuing." && \
        return 1

    # Make sure we have supported files to encode
    [[ $(ls | egrep '\.flac|\.wav|\.aiff' | wc -l) -eq 0 ]] && \
        echo "${BLD}opus_convert:${RST} There's nothing to do." && \
        return 1

    # Not supporting wildcards for converting
    ls | egrep '\.flac|\.wav|\.aiff' | while read i; do
        opusenc --quiet --vbr --bitrate 192 --comp 10 --expect-loss 0 "${i}" "$(echo ${i} | sed 's/\(.*\)\..*/\1/').ogg"
    done
}

# Last, but my most convenient part
export PS1="\[\e[1;36m\]\u@\h\[\e[1;37m\] \W\[\e[1;34m\]\`parse_git_branch\`\[\e[1;36m\] \$\[\e[0m\] "
