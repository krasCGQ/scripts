#!/hint/bash
# Common environment setup (deprecated functions)
# Copyright (C) 2017-2023 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Parse current branch in git repository
parseGitBranch() {
    local BRANCH
    BRANCH=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/^* //')

    if [[ -n $BRANCH ]]; then
        # Don't give extra brackets if project isn't at any branch or is currently detached
        [[ $BRANCH != "("*")" ]] && BRANCH="($BRANCH)"
        # This is what we want to stdout
        echo " $BRANCH"
    fi
}

# Get latest Proton clang from GitHub releases
getProtonClang() {
    chkArch x86_64 || return 1
    local INSTALL_DIR LATEST NAME REPO URL VERSION
    INSTALL_DIR=/opt/kud/proton-clang
    REPO=kdrag0n/proton-clang

    prInfo "Obtaining latest version info..."
    LATEST=$(curl -s https://api.github.com/repos/$REPO/releases/latest | grep -w tag_name | cut -d ':' -f 2 | sed -e 's/[[:space:]]//' -e 's/"//g' -e 's/,//')
    if [[ $(<$INSTALL_DIR/ClangVersion.txt 2>/dev/null) -eq $LATEST ]]; then
        # we're up to date, skip.
        prInfo "Clang build $LATEST is up to date."
        rm /tmp/latest.json
        return
    fi

    URL=https://github.com/$REPO/archive/$LATEST.tar.gz
    NAME=$(echo $REPO | cut -d "/" -f 2)-$LATEST.tar.gz
    prInfo "Downloading $NAME..."
    if ! aria2c -d /tmp "$URL"; then
        prWarn "Failed to download $NAME."
        rm /tmp/"$NAME"
        return 1
    fi

    if [[ -d $INSTALL_DIR ]]; then
        prInfo "Backing up old Clang build..."
        [[ -d $INSTALL_DIR-old ]] && rm -r $INSTALL_DIR-old
        mv -f $INSTALL_DIR{,-old}
    fi

    prInfo "Extracting $NAME..."
    tar -C /opt/kud -xf /tmp/"$NAME"
    mv /opt/kud/"${NAME/.tar.gz/}" $INSTALL_DIR
    # write build version
    echo "$LATEST" >$INSTALL_DIR/ClangVersion.txt
    rm /tmp/"$NAME"

    # {29} = last 28 letters of SHA-1 + trailing right parentheses
    VERSION=$($INSTALL_DIR/bin/clang --version | head -1 | cut -d ' ' -f 1,2,4,6 | sed -e 's/.\{29\}$//')
    prInfo "Successfully installed $VERSION."
}

# Fix Snapdragon LLVM permissions and symlinks; prebuilts extracted from BSP
fixSdllvm() {
    local VERSION
    chkArch x86_64 || return 1
    pushd "$1" >/dev/null || return

    # try to get Clang major version
    [[ ! -x bin/clang ]] && chmod +x bin/clang
    VERSION=$(bin/clang --version | head -1 | cut -d' ' -f3 | cut -d. -f1)

    prInfo "Fixing permissions and symlinks..."
    (
        cd bin || return 1
        [[ -f ld.qcld ]] && {
            for i in {a{arch64,rm},riscv,x86}-link; do
                [[ ! -f $i ]] && continue
                rm -f $i
                ln -s ld.qcld $i
            done
        }
        for i in clang{++,-c{l,pp}}; do
            rm -f $i
            ln -s clang $i
        done
        for i in ld.lld ld64.lld{,.darwin{new,old}} lld-link wasm-ld; do
            [[ ! -f $i ]] && continue
            rm -f $i
            ln -s lld $i
        done
        for i in llvm-{dlltool,{,ran}lib}; do
            rm -f $i
            ln -s llvm-ar $i
        done
        for i in llvm-{install-name-tool,{bitcode-,}strip}; do
            [[ ! -f $i ]] && continue
            rm -f $i
            ln -s llvm-objcopy $i
        done
        [[ -f llvm-addr2line ]] && {
            rm -f llvm-addr2line
            ln -s llvm-{symbolizer,addr2line}
        }
        [[ -f llvm-otool ]] && {
            rm -f llvm-otool
            ln -s llvm-{objdump,otool}
        }
        [[ -f llvm-windres ]] && {
            rm -f llvm-windres
            ln -s llvm-{rc,windres}
        }
        rm -f clang llvm-readelf
        ln -s clang{-"$VERSION",}
        ln -s llvm-{readobj,readelf}
    )
    (
        cd lib || return 1
        for i in LTO LW; do
            rm -f lib$i.so
            ln -s lib$i.so{."$VERSION",}
        done
        rm -f libc++.so{,.1} libc++abi.so{,.1}
        ln -s libc++.so{.1,}
        ln -s libc++.so.1{.0,}
        ln -s libc++abi.so{.1,}
        ln -s libc++abi.so.1{.0,}
        # only present on 12+
        [[ -f libprotobuf-lite.so ]] && {
            VERSION=$(find . -name 'libprotobuf-lite.so.*' | rev | cut -d. -f-4 | rev)
            rm -f libprotobuf-lite.so
            ln -s libprotobuf-lite.so{."$VERSION",}
        }
        [[ -f libprotoc.so ]] && {
            VERSION=$(find . -name 'libprotoc.so.*' | rev | cut -d. -f-4 | rev)
            rm -f libprotoc.so
            ln -s libprotoc.so{."$VERSION",}
        }
    )
    find ./**/bin -type f -exec test ! -x {} \; -exec chmod +x {} \;
    find lib -maxdepth 1 -type f -exec test ! -x {} \; -exec chmod +x {} \;
    find libexec -type f -exec test ! -x {} \; -exec chmod +x {} \;

    prInfo "Done."
    popd >/dev/null || true
}
