#!/usr/bin/env bash
# shellcheck source=/dev/null
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import common bash completion
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/common

# Use Central Indonesia Time
export TZ=Asia/Makassar

# Export GOPATH early for checking
export GOPATH=${HOME}/.local/go

# Default local binary path
LOCAL_PATH=${HOME}/.local

# Other variables used around this script
CTNGCOMP=${HOME}/src/ct-ng/bash-completion/ct-ng
TRANSFERSH=${HOME}/scripts/transfer.sh

# If 'hostname' returns botstack, set up caddy & http-server aliases
[[ $(hostname) == botstack ]] && \
    { alias caddy='caddy -quic -quiet -conf ${HOME}/Caddyfile &';
      alias http-server='http-server -a 0.0.0.0 -p 9001 >> /dev/null &'; }

# If GOPATH doesn't exist, unset it
[[ ! -d ${GOPATH} ]] && \
    unset GOPATH

# Export local binary paths
export PATH=${LOCAL_PATH}/bin:${PATH}
[[ -d ${GOPATH} ]] && \
    export PATH=${GOPATH}/bin:${PATH}

# crosstool-ng
[[ -f ${CTNGCOMP} ]] && \
    . "${CTNGCOMP}"

# transfer.sh
[[ -f ${TRANSFERSH} ]] && \
    . "${TRANSFERSH}"

# Shortcut for ssh-agent setup
function ssh_setup {
    # Do an unconditional check
    [[ ! -f ${HOME}/.ssh/id_ed25519 ]] && \
        { warn "Please generate an SSH key before using this command."; return 1; }

    # The actual setup is here
    eval "$(ssh-agent -s)"
    ssh-add "${HOME}"/.ssh/id_ed25519
}

# Date checking for GMP daily snapshot download
function check_gmp_date {
    local GAP

    [[ $(TZ=Europe/Berlin date +%Z) == CEST ]] && \
        GAP=15600 || \
        GAP=19200

    date --date=@$(($(date +%s) - GAP)) -u +%Y%m%d
}

# A wrapper to automate crosstool-NG toolchain build
function ct-ng_build {
    local TARDIR GITDIR ISLDIR
    TARDIR=${CTDIR}/tarballs
    GITDIR=${CTDIR}/git

    [[ -z $(command -v ct-ng) ]] && \
        { warn "${BLD}ct-ng${RST} isn't installed." \
               "Please build or install crosstool-NG package before continuing."; return 1; }

    [[ -z ${CTDIR} ]] && \
        { warn "${BLD}CTDIR${RST} variable is empty. Refusing to continue."; return 1; }

    (
        cd "${CTDIR}" || return 1

        echo "- Cleaning up work directory..."
        ct-ng clean > /dev/null || return 1

        (
            cd "${TARDIR}" || return 1

            [[ ! -f "gmp-6.1.99-$(check_gmp_date).tar.lz" ]] && \
                { info "Downloading gmp-6.1.99-$(check_gmp_date).tar.lz...";
                  wget -q https://gmplib.org/download/snapshot/"gmp-6.1.99-$(check_gmp_date).tar.lz"; }
        )
        (
            cd "${GITDIR}" || return 1;

            info "Updating git projects..."
            ./update || return 1
        )

        ct-ng source || return 1;

        if ct-ng build; then
            info "Successfully built the toolchain."
        else
            warn "Failed to build the toolchain."
            return 1
        fi
    )
}

# Update all local binaries
function update_binaries {
    # Caddy
    (
        # Check if ${GOPATH} is defined and exist
        [[ -z ${GOPATH} || ! -d ${GOPATH} ]] && \
            { warn "GOPATH doesn't seem to be defined or exist."; return 1; }

        # Fetch or update required projects
        info "Fetching Caddy sources..."
        for PROJECTS in mholt/caddy/caddy caddyserver/builds; do
            go get -u github.com/${PROJECTS} || \
                { warn "Failed to fetch ${PROJECTS}."; return 1; }
        done

        # Build from source
        info "Building Caddy..."
        cd "${GOPATH}"/src/github.com/mholt/caddy/caddy || return 1
        go run build.go || return 1
    )

    # crosstool-NG
    (
        # Local variables
        local CT_SRC THREADS
        CT_SRC=${HOME}/src/ct-ng
        THREADS=$(nproc --all)

        cd "${CT_SRC}" || return 1

        # Uninstall already installed binary if exist
        [[ -f ${LOCAL_DIR}/bin/ct-ng ]] && \
            { info "Uninstalling previous version of crosstool-NG...";
              make uninstall -j"${THREADS}" > /dev/null; }

        # Clean working directory
        info "Cleaning crosstool-NG directory..."
        make distclean -j"${THREADS}" &> /dev/null
        git clean -dfx > /dev/null

        # Update sources
        info "Updating crosstool-NG sources..."
        git pull &> /dev/null || \
            { warn "Failed to update crosstool-NG sources."; return 1; }

        # Configuration
        info "Generating crosstool-NG configuration files..."
        { ./bootstrap 2> /dev/null;
          ./configure --prefix="${LOCAL_PATH}" > /dev/null; } || \
            { warn "Failed to generate crosstool-NG configuration files."; return 1; }

        # Build from source
        info "Building crosstool-NG..."
        make -j"${THREADS}" > /dev/null || return 1

        # Install to local binary path
        info "Installing crosstool-NG..."
        make install -j"${THREADS}" > /dev/null || return 1
    )

    # Done!
    info "Done."
}

# Last, but my most convenient part
export PS1='\[\e[1;32m\]\u@\h\[\e[1;37m\] \W\[\e[1;33m\]$(parse_git_branch)\[\e[1;32m\] \$\[\e[0m\] '
