#!/usr/bin/env bash
# shellcheck source=/dev/null
# Common environment setup
# Copyright (C) 2017-2019 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import treewide environment script
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/global

# Import Telegram Chat ID fetching function if exists
[[ -f ${SCRIPTDIR}/tg_chatid ]] && \
    . "${SCRIPTDIR}"/tg_chatid

## Aliases

# Set up common aliases
alias nano='nano -au'
alias wget='wget -c -t 0 --retry-connrefused'

## Variables

# Required for GPG signing
GPG_TTY=$(tty)

# GNU nano for text editor
EDITOR=nano

# Use ccache for faster compiling
USE_CCACHE=true

# My kernel identity in nutshell
KBUILD_BUILD_USER=krasCGQ
KBUILD_BUILD_HOST=KudProject

# Export some variables to satisfy shellcheck requirements
export GPG_TTY EDITOR USE_CCACHE KBUILD_BUILD_USER KBUILD_BUILD_HOST

# Import Telegram bot token and chat ID (KudProject Community)
[[ -f ${SCRIPTDIR}/tg_token && -f ${SCRIPTDIR}/tg_chatid ]] && \
    { TELEGRAM_TOKEN=$(cat "${SCRIPTDIR}"/tg_token);
      TELEGRAM_CHAT=$(get_chatid kud_community);
      export TELEGRAM_TOKEN TELEGRAM_CHAT; }

# Parse current branch in git repository
function parse_git_branch {
    local BRANCH
    BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/^* //')

    if [[ -n ${BRANCH} ]]; then
        # Don't give extra brackets if project isn't at any branch or is currently detached
        [[ ${BRANCH} != "("* && ${BRANCH} != *")" ]] && \
            BRANCH="(${BRANCH})"

        # This is what we want to stdout
        echo " ${BRANCH}"
    fi
}

# Sign flashable zip with zipsigner
function zipsigner {
    [[ -z $(command -v java) ]] && \
        { warn "Please install any of OpenJDK version before continuing."; return 1; }

    [[ -z ${ZIPSIGNER} ]] && \
        { warn "${BLD}ZIPSIGNER${RST} variable is empty. Refusing to continue."; return 1; }

    [[ ${#} -lt 2 ]] && \
        { warn "${BLD}Usage:${RST} zipsigner <unsigned-zip> <signed-zip>"; return 1; }

    [[ ! -f ${ZIPSIGNER} ]] && \
        { warn "${BLD}$(basename "${ZIPSIGNER}")${RST} doesn't exist in defined path."; return 1; }

    [[ ! -f ${1} ]] && \
        { warn "${BLD}$(basename "${1}")${RST} doesn't exist in defined path."; return 1; }

    [[ ! -d $(dirname "${2}") ]] && \
        mkdir -p "$(dirname "${2}")"

    info "Signing $(basename "${1}") as $(basename "${2}")..."
    if $(command -v java) -jar "${ZIPSIGNER}" "${1}" "${2}"; then
        info "The operation completed successfully."
    else
        local STATUS=${?}
        warn "Failed to do the operation."
        return ${STATUS}
    fi
}

# Wrapper to automatically merge latest Linux stable revision to working branch
# Usage: korg_merge <revision-to-merge>
function korg_merge {
    git pull git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux v${1} --signoff
}
