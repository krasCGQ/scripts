#!/hint/bash
#
# SPDX-FileCopyrightText: 2017-2024 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Common environment setup
#

# Import treewide environment script
source "$SCRIPT_DIR"/env/global

# Export Distro ID to be picked up by select functions
ID=$(getDistroID)
export ID

# Aliases
_curl_version=$(curl -V | grep -o 'curl [^ ]*' | sed 's|[[:space:]]|/|')
createAlias update-grub 'chkSudo grub-mkconfig -o /boot/grub/grub.cfg'
createAlias aria2cd "aria2c --uri-selector=adaptive -R -U \"$_curl_version\" -c -m 0 -s 16 -x 16"
createAlias aria2ct 'aria2c --enable-dht6=true'
createSelfAlias axel "-U \"$_curl_version\" -c -n 16"
createSelfAlias wget "--hsts-file=${XDG_CACHE_HOME:-$HOME/.cache}/wget-hsts --retry-connrefused -U \"$_curl_version\" -c"
unset _curl_version

# Make sorting disregard any set LC_ALL and LC_COLLATE options
createAlias sort 'LC_ALL= LC_COLLATE=C sort'

# Required for GPG signing
GPG_TTY=$(tty)
# My kernel identity in nutshell
KBUILD_BUILD_USER=krasCGQ
KBUILD_BUILD_HOST=KudProject
# Export variables to satisfy shellcheck requirements
export GPG_TTY KBUILD_BUILD_USER KBUILD_BUILD_HOST

# Make the running gnome-keyring SSH daemon visible to terminal session - useful on non-GNOME
if [[ -z $SSH_AUTH_SOCK ]] && command -v systemctl >/dev/null; then
    if systemctl --user is-active gnome-keyring-daemon &>/dev/null; then
        SSH_AUTH_SOCK=$(systemctl --user show gnome-keyring-daemon | grep ^ExecStart= |
            grep -o '\--control-directory=[^ ]*' | cut -d= -f2)
        SSH_AUTH_SOCK=$SSH_AUTH_SOCK/ssh
        export SSH_AUTH_SOCK
    fi
    # Unset SSH_AUTH_SOCK if it's not what we want
    [[ -S $SSH_AUTH_SOCK ]] || unset SSH_AUTH_SOCK
fi

if [[ -z $IS_TERMUX ]]; then
    # Export new PATH containing local binaries
    [[ $(basename "$SHELL") == "$CURRENT_SHELL" ]] && export PATH=$HOME/.local/bin:$PATH
    # Export HOME as USER_DIR for use with sudo commands when required
    USER_DIR=$HOME
    # GNU nano for text editor
    EDITOR=nano
    # Export variables to satisfy shellcheck requirements
    export USER_DIR EDITOR
fi

# Include Arch Linux-specific snippets for Arch-based distros
[[ $ID == arch || $ID == manjaro ]] && source "$SCRIPT_DIR"/snippets/archlinux
# Source Telegram-specific script if exists
[[ -f $SCRIPT_DIR/env/telegram ]] && source "$SCRIPT_DIR"/env/telegram

# Download MIUI full OTA or fastboot firmware from multiple sources using aria2.
#
# This function accepts exactly one argument, which is name of the firmware package itself (e.g.
# miui_PERIDOT_OS1.0.13.0.UNPCNXM_713afcfba9_14.0.zip). If this points to a URL, a sanitization
# will be made so only the file name will be processed further.
#
# Any extra arguments will be purposefully ignored.
if command -v aria2c >/dev/null; then
    miui_download() {
        unset OTA_LINKS

        local MIUI_PACKAGE MIUI_VERSION
        MIUI_PACKAGE=$(echo -n "$1" | rev | cut -d/ -f1 | rev)
        MIUI_VERSION=$(echo "$MIUI_PACKAGE" | grep -o '[OS|V][^_]*')

        # A fixed list of available mirrors
        local OTA_URL_LIST=(
            'bigota.d.miui.com'
            'bn.d.miui.com'
            'hugeota.d.miui.com'
        )

        # Construct download links from available mirrors
        for OTA_URL in "${OTA_URL_LIST[@]}"; do
            OTA_LINKS+=("https://${OTA_URL}/${MIUI_VERSION}/${MIUI_PACKAGE}")
        done

        # Important: Replace aria2cd with aria2c if you don't wish to inherit above alias
        aria2cd "${OTA_LINKS[@]}"
    }
fi

# Wrapper to automatically merge latest Linux stable revision to working branch
# Usage: korg_merge <revision-to-merge>
korgMerge() { git pull git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux v"$1" --signoff; }

# sudo: Shortcut to do system update; completely depends on distribution
sysUpdate() {
    case $ID in
    almalinux | centos | fedora | rhel | rocky)
        # Overriding sudo will somehow break RPM package managers, so don't do that
        # Only DNF is supported for this function, RPM and YUM won't
        chkSudo dnf --refresh distro-sync
        ;;
    alpine)
        chkSudo su -c "apk update && apk upgrade"
        ;;
    arch | manjaro)
        # AUR, please fuck yourself
        [[ -n $(command -v powerpill) ]] && UPD=powerpill || UPD=pacman
        # Always synchronize package databases with pacman
        chkSudo su -c "pacman -Sy && $UPD -Su --noconfirm"
        ;;
    debian | ubuntu)
        # No apt-get gang
        chkSudo su -c "apt update && apt dist-upgrade -y"
        ;;
    termux)
        # Equivalent to `apt update && apt upgrade`
        pkg update -y
        ;;
    *) prWarn "This distribution (${ID:-unknown}) is currently not supported." ;;
    esac
    [[ -n $(command -v flatpak) ]] && chkSudo flatpak -y update
    # Snap usually updates packages automatically and unattended
    [[ -n $(command -v snap) ]] && chkSudo snap refresh
    return 0
}
