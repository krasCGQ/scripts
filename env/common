# shellcheck shell=bash
# shellcheck source=/dev/null
# Common environment setup
# Copyright (C) 2017-2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import treewide environment script
source "$SCRIPTDIR"/env/global

# Aliases
alias nano='nano -au'
alias wget='wget -c -t 0 --retry-connrefused'

# Export HOME as USER_DIR for use with sudo commands when required
USER_DIR=$HOME
# Required for GPG signing
GPG_TTY=$(tty)
# GNU nano for text editor
EDITOR=nano
# My kernel identity in nutshell
KBUILD_BUILD_USER=krasCGQ
KBUILD_BUILD_HOST=KudProject
# Export some variables to satisfy shellcheck requirements
export USER_DIR GPG_TTY EDITOR KBUILD_BUILD_USER KBUILD_BUILD_HOST

# Source Telegram-specific script if exists
[[ -f $SCRIPTDIR/env/telegram ]] && source "$SCRIPTDIR"/env/telegram

# Wrapper to automatically merge latest Linux stable revision to working branch
# Usage: korg_merge <revision-to-merge>
korg_merge() { git pull git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux v"$1" --signoff; }

# Bash: Parse current branch in git repository
if [[ -n $BASH ]]; then
    parse_git_branch() {
        local BRANCH
        BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/^* //')

        if [[ -n $BRANCH ]]; then
            # Don't give extra brackets if project isn't at any branch or is currently detached
            [[ $BRANCH != "("*")" ]] && BRANCH="($BRANCH)"

            # This is what we want to stdout
            echo " $BRANCH"
        fi
    }
fi

# Sign flashable zip with zipsigner
zipsigner() {
    local SIGNATURE SIGNED UNSIGNED

    if [[ -z $(command -v java) ]]; then
        warn "Please install any of OpenJDK version before continuing."
        return 1
    elif [[ -z $ZIPSIGNER || ! -f $ZIPSIGNER ]]; then
        warn "${BLD}ZIPSIGNER$RST is empty or doesn't exist. Refusing to continue."
        return 1
    elif [[ $# -lt 1 ]]; then
        warn "${BLD}Usage:$RST zipsigner [-s signing key] <unsigned-zip> [signed-zip]" \
             "If signed-zip is undefined, it'll default to zip name + signed."
        return 1
    fi

    while [[ $# -ge 1 ]]; do
        case $1 in
            -s|--signing-key) shift
                SIGNATURE=$1 ;;

            *)
                UNSIGNED=$1
                shift
                [[ -n $1 ]] && SIGNED=$1 || SIGNED=${UNSIGNED/.zip/-signed.zip} ;;
        esac
        shift
    done

    # Create target folder if it doesn't exist
    [[ ! -d $(dirname "$SIGNED") ]] && mkdir -p "$(dirname "$SIGNED")"

    info "Signing $(basename "$UNSIGNED") as $(basename "$SIGNED")..."
    # TODO: Something better than this?
    java -jar "$ZIPSIGNER" "$SIGNATURE"{${SIGNATURE:+.x509.pem},${SIGNATURE:+.pk8}} "$UNSIGNED" "$SIGNED"
}

# Get latest Proton clang from GitHub releases
get_proton-clang() {
    local INSTALL_DIR LATEST NAME REPO URL VERSION
    INSTALL_DIR=/opt/kud/proton-clang
    REPO=kdrag0n/proton-clang

    info "Obtaining latest version info..."
    LATEST=$(curl -s https://api.github.com/repos/$REPO/releases/latest | grep -w tag_name | cut -d ':' -f 2 | sed -e 's/[[:space:]]//' -e 's/"//g' -e 's/,//')
    if [[ $(cat $INSTALL_DIR/ClangVersion.txt 2> /dev/null) -eq $LATEST ]]; then
        # we're up to date, skip.
        info "Clang build $LATEST is up to date."
        rm /tmp/latest.json
        return
    fi

    URL=https://github.com/$REPO/archive/$LATEST.tar.gz
    NAME=$(echo $REPO | cut -d "/" -f 2)-$LATEST.tar.gz
    info "Downloading $NAME..."
    if ! aria2c -d /tmp "$URL"; then
        warn "Failed to download $NAME."
        rm /tmp/"$NAME"
        return 1
    fi

    if [[ -d $INSTALL_DIR ]]; then
        info "Backing up old Clang build..."
        [[ -d $INSTALL_DIR-old ]] && rm -r $INSTALL_DIR-old
        mv -f $INSTALL_DIR{,-old}
    fi

    info "Extracting $NAME..."
    tar -C /opt/kud -xf /tmp/"$NAME"
    mv /opt/kud/"${NAME/.tar.gz}" $INSTALL_DIR
    # write build version
    echo "$LATEST" > $INSTALL_DIR/ClangVersion.txt
    rm /tmp/"$NAME"

    # {29} = last 28 letters of SHA-1 + trailing right parentheses
    VERSION=$($INSTALL_DIR/bin/clang --version | head -1 | cut -d ' ' -f 1,2,4,6 | sed -e 's/.\{29\}$//')
    info "Successfully installed $VERSION."
}
