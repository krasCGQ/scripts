#!/hint/bash
# shellcheck source=/dev/null
# Common environment setup
# Copyright (C) 2017-2022 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import treewide environment script
source "$SCRIPT_DIR"/env/global

# Export Distro ID to be picked up by select functions
ID=$(getDistroID)
export ID

# Aliases
createAlias update-grub 'chkSudo grub-mkconfig -o /boot/grub/grub.cfg'
createAlias aria2cd 'aria2c --uri-selector=adaptive -R -U "curl/7.82.0" -c -m 0 -x 16'
createAlias aria2ct 'aria2c --enable-dht6=true'
createSelfAlias axel '-U "curl/7.82.0" -c -n 16'
createSelfAlias wget '--retry-connrefused -U "curl/7.82.0" -c'

# Required for GPG signing
GPG_TTY=$(tty)
# My kernel identity in nutshell
KBUILD_BUILD_USER=krasCGQ
KBUILD_BUILD_HOST=KudProject
# Export variables to satisfy shellcheck requirements
export GPG_TTY KBUILD_BUILD_USER KBUILD_BUILD_HOST

if [[ -z $IS_TERMUX ]]; then
    # Export new PATH containing local binaries
    PATH=$HOME/.local/bin:$PATH
    # Export HOME as USER_DIR for use with sudo commands when required
    USER_DIR=$HOME
    # GNU nano for text editor
    EDITOR=nano
    # Export variables to satisfy shellcheck requirements
    export PATH USER_DIR EDITOR
fi

# Include Arch Linux-specific snippets for Arch-based distros
[[ $ID == arch || $ID == manjaro ]] && source "$SCRIPT_DIR"/snippets/archlinux
# Source Telegram-specific script if exists
[[ -f $SCRIPT_DIR/env/telegram ]] && source "$SCRIPT_DIR"/env/telegram

# Wrapper to automatically merge latest Linux stable revision to working branch
# Usage: korg_merge <revision-to-merge>
korgMerge() { git pull git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux v"$1" --signoff; }

# Fix Snapdragon LLVM permissions and symlinks; prebuilts extracted from BSP
fixSdllvm() {
    local VERSION
    chkArch x86_64 || return 1
    pushd "$1" >/dev/null || return

    # try to get Clang major version
    [[ ! -x bin/clang ]] && chmod +x bin/clang
    VERSION=$(bin/clang --version | head -1 | cut -d' ' -f3 | cut -d. -f1)

    prInfo "Fixing permissions and symlinks..."
    (
        cd bin || return 1
        [[ -f ld.qcld ]] && {
            for i in {a{arch64,rm},riscv,x86}-link; do
                [[ ! -f $i ]] && continue
                rm -f $i
                ln -s ld.qcld $i
            done
        }
        for i in clang{++,-c{l,pp}}; do
            rm -f $i
            ln -s clang $i
        done
        for i in ld.lld ld64.lld{,.darwin{new,old}} lld-link wasm-ld; do
            [[ ! -f $i ]] && continue
            rm -f $i
            ln -s lld $i
        done
        for i in llvm-{dlltool,{,ran}lib}; do
            rm -f $i
            ln -s llvm-ar $i
        done
        for i in llvm-{install-name-tool,{bitcode-,}strip}; do
            [[ ! -f $i ]] && continue
            rm -f $i
            ln -s llvm-objcopy $i
        done
        [[ -f llvm-addr2line ]] && {
            rm -f llvm-addr2line
            ln -s llvm-{symbolizer,addr2line}
        }
        [[ -f llvm-otool ]] && {
            rm -f llvm-otool
            ln -s llvm-{objdump,otool}
        }
        [[ -f llvm-windres ]] && {
            rm -f llvm-windres
            ln -s llvm-{rc,windres}
        }
        rm -f clang llvm-readelf
        ln -s clang{-"$VERSION",}
        ln -s llvm-{readobj,readelf}
    )
    (
        cd lib || return 1
        for i in LTO LW; do
            rm -f lib$i.so
            ln -s lib$i.so{."$VERSION",}
        done
        rm -f libc++.so{,.1} libc++abi.so{,.1}
        ln -s libc++.so{.1,}
        ln -s libc++.so.1{.0,}
        ln -s libc++abi.so{.1,}
        ln -s libc++abi.so.1{.0,}
        # only present on 12+
        [[ -f libprotobuf-lite.so ]] && {
            VERSION=$(find . -name 'libprotobuf-lite.so.*' | rev | cut -d. -f-4 | rev)
            rm -f libprotobuf-lite.so
            ln -s libprotobuf-lite.so{."$VERSION",}
        }
        [[ -f libprotoc.so ]] && {
            VERSION=$(find . -name 'libprotoc.so.*' | rev | cut -d. -f-4 | rev)
            rm -f libprotoc.so
            ln -s libprotoc.so{."$VERSION",}
        }
    )
    find ./**/bin -type f -exec test ! -x {} \; -exec chmod +x {} \;
    find lib -maxdepth 1 -type f -exec test ! -x {} \; -exec chmod +x {} \;
    find libexec -type f -exec test ! -x {} \; -exec chmod +x {} \;

    prInfo "Done."
    popd >/dev/null || true
}

# sudo: Shortcut to do system update; completely depends on distribution
sysUpdate() {
    case $ID in
    almalinux | centos | fedora | rhel | rocky)
        # Overriding sudo will somehow break RPM package managers, so don't do that
        # Only DNF is supported for this function, RPM and YUM won't
        chkSudo dnf --refresh distro-sync
        ;;
    alpine)
        chkSudo su -c "apk update && apk upgrade"
        ;;
    arch | manjaro)
        # AUR, please fuck yourself
        [[ -n $(command -v powerpill) ]] && UPD=powerpill || UPD=pacman
        # Always synchronize package databases with pacman
        chkSudo su -c "pacman -Sy && $UPD -Su --noconfirm"
        ;;
    debian | ubuntu)
        # No apt-get gang
        chkSudo su -c "apt update && apt dist-upgrade -y"
        ;;
    termux)
        # Equivalent to `apt update && apt upgrade`
        pkg update -y
        ;;
    *) prWarn "This distribution (${ID:-unknown}) is currently not supported." ;;
    esac
    [[ -n $(command -v flatpak) ]] && chkSudo flatpak -y update
    # Snap usually updates packages automatically and unattended
    [[ -n $(command -v snap) ]] && chkSudo snap refresh
    return 0
}
