#!/hint/bash
#
# SPDX-FileCopyrightText: 2017-2024 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Common environment setup
#

# Import treewide environment script
source "$SCRIPT_DIR/env/global"

#
# CLI downloader specific aliases.
#
# Due to use of latest cURL as downloader user agent, we group these aliases together. However,
# several notes need to be taken into consideration due to additional parameters:
#  * All three downloaders are instructed to resume downloading incomplete one(s) if possible.
#  * aria2 when called as a normal downloader, is aliased as aria2cd instead of aria2c.
#  * aria2 and axel support downloading with up to 16 simultaenous connections. Not every website
#    likes this behavior, however.
#  * While wget's HSTS cache file can be defined in wgetrc, due to need of respecting XDG directory
#    specification this is defined as part of the alias to itself instead. In addition, this alias
#    may cause infinite download tries if connection attempt still gets refused all the time.
#
_curl_version=$(curl -V | grep -o 'curl [^ ]*' | sed 's|[[:space:]]|/|')
mk_alias aria2cd "aria2c --uri-selector=adaptive -R -U \"${_curl_version}\" -c -m 0 -s 16 -x 16"
mk_alias_self axel "-U \"${_curl_version}\" -c -n 16"
mk_alias_self wget "--hsts-file=${XDG_CACHE_HOME:-$HOME/.cache}/wget-hsts --retry-connrefused -U \"${_curl_version}\" -c"
unset _curl_version

# Enable IPv6 DHT when aria2 is running as a torrent client
mk_alias aria2ct 'aria2c --enable-dht6=true'

# Make sorting disregard any set LC_ALL and LC_COLLATE options
mk_alias sort 'LC_ALL= LC_COLLATE=C sort'

# If this takes time considered to be intolerably long, append less intensive parameters
mk_alias_self optipng '-backup -fix -preserve -o7 -zm1-9 -zw32k'

# Any other aliases, mostly to stick together all parameters I personally use
mk_alias_self cjxl '--brotli_effort 10 --lossless_jpeg 1 --num_threads 0 -d 0 -e 10'
mk_alias_self flac '--keep-foreign-metadata-if-present -V -e -f -p -8'

#
# Create an alias to update-grub if the wrapper script doesn't exist.
#
# This primarily concerns non-Ubuntu systems using GRUB as bootloader of choice. As the wrapper
# itself contains and only contains this command alone, this can simply be aliased
#
command -v update-grub >/dev/null ||
    mk_alias update-grub '_su_exec grub-mkconfig -o /boot/grub/grub.cfg'

# Export new PATH containing local binaries, if it wasn't added before
[[ $PATH =~ $HOME/.local/bin ]] || export PATH=$HOME/.local/bin:$PATH

# Export Distro ID to be picked up by distro-specific functions
ID=$(get_distid) && export ID

# This is required for GPG signing
GPG_TTY=$(tty) && export GPG_TTY

# Make the running gnome-keyring SSH daemon visible to terminal session - useful on non-GNOME
if test -z "$SSH_AUTH_SOCK" && command -v systemctl >/dev/null; then
    if systemctl --user is-active gnome-keyring-daemon &>/dev/null; then
        SSH_AUTH_SOCK=$(systemctl --user show gnome-keyring-daemon | grep ^ExecStart= |
            grep -o '\--control-directory=[^ ]*' | cut -d= -f2)
        SSH_AUTH_SOCK=$SSH_AUTH_SOCK/ssh
        export SSH_AUTH_SOCK
    fi
    # Unset SSH_AUTH_SOCK if it's not what we want
    test -S "$SSH_AUTH_SOCK" || unset SSH_AUTH_SOCK
fi

# Avoid exporting these on Termux environment because they're unnecessary
if [[ -z $TERMUX_VERSION ]]; then
    export EDITOR=nano     # text editor of choice
    export USER_DIR=$HOME  # for use with sudo when needed
fi

# Include Arch Linux-specific snippets for Arch-based distros
[[ $ID == arch || $ID == manjaro ]] && source "$SCRIPT_DIR/snippets/archlinux"

#
# Download MIUI full OTA or fastboot firmware from multiple sources using aria2.
#
# This function accepts exactly one argument, which is name of the firmware package itself (e.g.
# miui_PERIDOT_OS1.0.13.0.UNPCNXM_713afcfba9_14.0.zip). If this points to a URL, a sanitization
# will be made so only the file name will be processed further.
#
# This matches any MIUI and HyperOS version, and any extra arguments will be purposefully ignored
#
if command -v aria2c >/dev/null; then
    miui_download() {
        local MIUI_PACKAGE MIUI_VERSION OTA_LINKS=() OTA_URL OTA_URL_LIST

        # Get sanitized package name and MIUI version from supplied argument
        MIUI_PACKAGE=$(echo -n "$1" | rev | cut -d/ -f1 | rev)
        MIUI_VERSION=$(echo "$MIUI_PACKAGE" | grep -o '[OS|V][^_]*')

        # A fixed list of available mirrors
        OTA_URL_LIST=(
            'bigota.d.miui.com'
            'bn.d.miui.com'
            'hugeota.d.miui.com'
        )

        # Construct download links from available mirrors
        for OTA_URL in "${OTA_URL_LIST[@]}"; do
            OTA_LINKS+=("https://$OTA_URL/$MIUI_VERSION/$MIUI_PACKAGE")
        done

        # IMPORTANT: Replace aria2cd with aria2c if you don't wish to inherit above alias
        aria2cd "${OTA_LINKS[@]}"
    }
fi

#
# This function attempts to cover system update on as many distributions as possible, together
# with software deployment/distribution tools like Flatpak and Snap.
#
# Superuser is always required, except for Termux (unnecessary) and Flatpak (not required)
#
update_system() {
    case $ID in
    almalinux | centos | fedora | rhel | rocky)
        #
        # Overriding sudo will somehow break RPM package managers, so don't do that.
        # Only DNF is supported for this function, RPM and YUM won't
        #
        _su_exec dnf --refresh distro-sync
        ;;
    alpine)
        _su_exec su -c 'apk update && apk upgrade'
        ;;
    arch | manjaro)
        # AUR, please fuck yourself
        command -v powerpill >/dev/null && UPD=powerpill || UPD=pacman
        # Always synchronize package databases with pacman
        _su_exec su -c "pacman -Sy && $UPD -Su --noconfirm"
        ;;
    debian | ubuntu)
        # No apt-get gang
        _su_exec su -c 'apt update && apt dist-upgrade -y'
        ;;
    termux)
        pkg upgrade -y  # equals to `apt update && apt upgrade -y` on every startup
        ;;
    *)
        _pr_warn "This distribution (${ID:-unknown}) is currently not supported."
        ;;
    esac
    command -v flatpak >/dev/null && flatpak -y update
    # Likely to be unnecessary since Snap may periodically update all packages unattended
    command -v snap >/dev/null && _su_exec snap refresh
    return 0
}
