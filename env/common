#!/usr/bin/env bash
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Text styles
BLD=$(tput bold)
RST=$(tput sgr0)

## Aliases

# Set up common aliases
alias nano='nano -FISWaiuwx'
alias wget='wget -c -t 0 --retry-connrefused'

## Variables

# Required for GPG signing
GPG_TTY=$(tty)
export GPG_TTY

# GNU nano for text editor
export EDITOR=nano

# Use ccache for faster compiling
export USE_CCACHE=true

# My kernel identity in nutshell
export KBUILD_BUILD_USER=krasCGQ
export KBUILD_BUILD_HOST=KudProject

# Define script directory
SCRIPTDIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/..

# Import Telegram bot token and chat ID (KudProject Community)
[[ -f ${SCRIPTDIR}/tg_token && -f ${SCRIPTDIR}/tg_chatid ]] && \
    TELEGRAM_TOKEN=$(cat "${SCRIPTDIR}"/tg_token) && \
    TELEGRAM_CHAT=$(< "${SCRIPTDIR}"/tg_chatid head -n 1 -c 14) && \
    export TELEGRAM_TOKEN TELEGRAM_CHAT

# Prints a message with a dash
function info {
    echo "- ${1}"
    while [[ ${#} -ge 2 ]]; do
        echo "  ${2}"
        shift
    done
}

# Prints a message with an exclamation point
function warn {
    echo "! ${1}" >&2
    while [[ ${#} -ge 2 ]]; do
        echo "  ${2}" >&2
        shift
    done
}

# Parse current branch in git repository
function parse_git_branch {
    BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [[ ! -z ${BRANCH} ]]; then
        # Don't give extra brackets if project isn't at any branch or is currently detached
        [[ ${BRANCH} != "("* && ${BRANCH} != *")" ]] && \
            BRANCH="(${BRANCH})"

        # This is what we want to stdout
        echo " ${BRANCH}"
    fi
}

# Sign flashable zip with zipsigner
function zipsigner {
    [[ -z $(command -v java) ]] && \
        warn "Please install any of OpenJDK version before continuing." && \
        return 1

    [[ -z ${ZIPSIGNER} ]] && \
        warn "${BLD}ZIPSIGNER${RST} variable is empty. Refusing to continue." && \
        return 1

    [[ ${#} -lt 2 ]] && \
        warn "${BLD}Usage:${RST} zipsigner <unsigned-zip> <signed-zip>" && \
        return 1

    [[ ! -f ${ZIPSIGNER} ]] && \
        warn "${BLD}$(basename "${ZIPSIGNER}")${RST} doesn't exist in defined path." && \
        return 1

    [[ ! -f ${1} ]] && \
        warn "${BLD}$(basename "${1}")${RST} doesn't exist in defined path." && \
        return 1

    [[ ! -d $(dirname "${2}") ]] && \
        mkdir -p "$(dirname "${2}")"

    echo "- Signing $(basename "${1}") as $(basename "${2}")..."
    if $(command -v java) -jar "${ZIPSIGNER}" "${1}" "${2}"; then
        info "Operation has completed successfully."
    else
        STATUS=${?}
        warn "Failed to do defined operation."
        return ${STATUS}
    fi
}
