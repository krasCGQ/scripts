#!/usr/bin/env bash
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import common bash completion
# shellcheck disable=SC1090
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/common

# Set up aliases
alias update='sudo su -c "pacman -Sy --noprogressbar && bauerbill -Su --noconfirm --noprogressbar"'

# Export local binary path
export PATH=${HOME}/.files/bin:${PATH}

# Export ccache-backed compiler symlinks
export PATH=/usr/lib/ccache/bin:${PATH}

# Sign release kernel zip with zipsigner
function zipsigner {
    [[ -z $(command -v java) ]] && \
        echo "! Please install any of OpenJDK version before continuing." && \
        return 1

    [[ -z ${ZIPSIGNER} ]] && \
        echo "! ${BLD}ZIPSIGNER${RST} variable is empty. Refusing to continue." && \
        return 1

    [[ ${#} -lt 2 ]] && \
        echo "! ${BLD}Usage:${RST} zipsigner <unsigned-zip> <signed-zip>" && \
        return 1

    [[ ! -f ${ZIPSIGNER} ]] && \
        echo "! ${BLD}$(basename "${ZIPSIGNER}")${RST} doesn't exist in defined path." && \
        return 1

    [[ ! -f ${1} ]] && \
        echo "! ${BLD}$(basename "${1}")${RST} doesn't exist in defined path." && \
        return 1

    [[ ! -d $(dirname "${2}") ]] && \
        mkdir -p "$(dirname "${2}")"

    echo "- Signing $(basename "${1}") as $(basename "${2}")..."
    if $(command -v java) -jar "${ZIPSIGNER}" "${1}" "${2}"; then
        echo "i Operation has completed successfully."
    else
        STATUS=${?}
        echo "! Failed to do defined operation."
        return ${STATUS}
    fi
}

# Repack FLAC files with maximum compression and ReplayGain applied
function flac_repack {
    # Make sure FLAC package is installed
    [[ -z $(command -v flac) ]] && \
        echo "! Please install flac package before continuing." && \
        return 1

    # Make sure we have FLAC files to repack
    [[ $(find . -name "*.flac" | wc -l) -eq 0 ]] && \
        echo "! There's nothing to do." && \
        return 1

    # First we unpack
    flac --delete-input-file --totally-silent -d ./*.flac || \
        return 1

    # Then we repack with maximum compression and ReplayGain applied
    for SONG in ./*; do
        case "${SONG}" in
            *.aiff|*.wav) flac --delete-input-file --totally-silent --replay-gain -V8 "${SONG}" || return 1;;
        esac
    done
}

# Convert all FLAC, WAV, and/or AIFF files to Opus
function opus_convert {
    # Ask to install opus-tools package if opusenc doesn't exist
    [[ -z $(command -v opusenc) ]] && \
        echo "! Please install opus-tools package before continuing." && \
        return 1

    for SONG in ./*; do
        case "${SONG}" in
            *.aiff|*.flac|*.wav) # Declare that we have something to do!
                                 SUPPORTED=true
                                 # Not supporting wildcards for converting
                                 opusenc --quiet --vbr --bitrate 192 --comp 10 --expect-loss 0 \
                                     "${SONG}" \
                                     "$(basename "${SONG}" | sed 's/\(.*\)\..*/\1/').ogg" || \
                                     return 1 ;;
        esac
    done

    [[ ! ${SUPPORTED} ]] && \
        echo "! There's nothing to do." && \
        return 1
}

# Wrapper to build both AArch64 and x86_64 GNU toolchains using build-tools-gcc
function btg_build {
    [[ -z ${BTGDIR} || -z ${OPTDIR} ]] && \
        echo "! ${BLD}BTGDIR${RST} and/or ${BLD}OPTDIR${RST} variables are empty. Refusing to continue." && \
        return 1

    (
        ! cd "${BTGDIR}" && \
            echo "! $(basename "${BTGDIR}") doesn't exist in defined path." && \
            return 1

        # FIXME: Command requires sudo :/
        [[ ! -d ${OPTDIR} ]] && \
            sudo mkdir -p "${OPTDIR}" && \
            sudo chown -R "$(whoami)":users "${OPTDIR}"

        ! ./build -a arm64 -s gnu -v 9 -nt && \
            return 1

        rm -rf "${OPTDIR}"/aarch64-linux-gnu-old
        [[ -d ${OPTDIR}/aarch64-linux-gnu ]] && \
            mv -f "${OPTDIR}"/aarch64-linux-gnu{,old}
        mv -f aarch64-linux-gnu "${OPTDIR}"

        ! ./build -a x86_64 -s gnu -v 9 -nt -nu && \
            return 1

        rm -rf "${OPTDIR}"/x86_64-linux-gnu-old
        [[ -d ${OPTDIR}/x86_64-linux-gnu ]] && \
            mv -f "${OPTDIR}"/x86_64-linux-gnu{,old}
        mv -f x86_64-linux-gnu "${OPTDIR}"

        rm -rf build-*
    )
}

# Last, but my most convenient part
# shellcheck disable=SC1117
export PS1="\[\e[1;36m\]\u@\h\[\e[1;37m\] \W\[\e[1;34m\]\`parse_git_branch\`\[\e[1;36m\] \$\[\e[0m\] "
