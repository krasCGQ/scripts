# shellcheck shell=bash
# Environment setup for my notebook
# Copyright (C) 2017-2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Don't setup if not in correct environment
[[ $(hostname) == harutsuki || $(hostname) == strelka ]] || return 1

# Set path to script directory depending on which shell we use
if [[ -n $BASH ]]; then
    # Bash
    SCRIPTDIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/..
elif [[ -n $ZSH_VERSION ]]; then
    # Zsh
    # shellcheck disable=SC2154
    SCRIPTDIR=$(dirname "${(%):-%x}")/..
else
    echo "! Unsupported shell. Exiting." >&2
    return 1
fi

# Initialize GNOME Keyring for non-GTK environments
[[ -n $DESKTOP_SESSION ]] && { eval "$(gnome-keyring-daemon --start)" && export SSH_AUTH_SOCK; }

# Import common environment script
# shellcheck source=/dev/null
source "$SCRIPTDIR"/env/common

# Aliases
alias ak-build='$SCRIPTDIR/tasks/kernel.bash'
alias neofetch='neofetch --os_arch off --speed_shorthand on --cpu_temp C --cpu_cores off --uptime_shorthand tiny --color_blocks off'
alias reflector='sudo reflector --save /etc/pacman.d/mirrorlist --sort rate --threads 8 --ipv4'
alias sys2sbin='sed -i "s|/system/bin/linker64|/sbin/linker64\x0\x0\x0\x0\x0\x0|g"'
alias update='sudo su -c "pacman -Sy && powerpill -Su --noconfirm"'
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

# Export new PATH containing local binaries
[[ -z $TMUX ]] && export PATH=$HOME/.files/bin:$PATH

# Convert all FLAC, WAV, and/or AIFF files to Opus
opus_convert() {
    # Ask to install opus-tools package if opusenc doesn't exist
    [[ -z $(command -v opusenc) ]] && {
        warn "Please install opus-tools package before continuing."
        return 1
    }

    for SONG in ./*; do
        case "$SONG" in
        *.aiff | *.flac | *.wav)
            # Not supporting wildcards for converting
            opusenc --quiet --vbr --bitrate 192 --comp 10 --expect-loss 0 \
                "$SONG" "$(basename "$SONG" | sed 's/\(.*\)\..*/\1/').ogg" || return 1
            SUPPORTED=true
            ;;
        esac
    done

    # Return non-zero status if nothing to do
    [[ -z $SUPPORTED ]] && {
        warn "There's nothing to do."
        return 1
    }

    return 0
}

# Setup zRAM to take the whole RAM size
function zram_init() { (
    [[ $(whoami) != root ]] && return 1

    local MEMSIZE
    # Get amount of physical memory (in kB)
    MEMSIZE=$(grep MemTotal /proc/meminfo | awk '{print $2$3}')

    # Turn off HDD swap first
    swapoff /dev/sda1

    # Setup zRAM as swap
    modprobe zram
    # Write same amount of physical memory
    echo "$MEMSIZE" >/sys/devices/virtual/block/zram0/disksize
    mkswap /dev/zram0
    swapon -p 100 /dev/zram0

    # Set swappiness to 100
    sysctl vm.swappiness=100
) || return 1; }
alias zram_init='check_sudo su -c "$(declare -f zram_init) && zram_init &> /dev/null"'

# De-init zRAM configuration set before
zram_deinit() { (
    [[ $(whoami) != root ]] && return 1

    # Turn off zRAM
    swapoff /dev/zram0
    rmmod zram

    # Turn back on HDD swap
    swapon -p -2 /dev/sda1

    # Set swappiness to 1
    sysctl vm.swappiness=1
) || return 0; } # suppress non-zero exit status
alias zram_deinit='check_sudo su -c "$(declare -f zram_deinit) && zram_deinit &> /dev/null"'

# Quick way to install MoeSyndrome Kernel packages
_vk_install() {
    [[ $(whoami) != root ]] && return 1

    pacman -U /mnt/ssd/aur/linux-moesyndrome*"$1"-"$(uname -m)".pkg.tar*
    "$USER_DIR"/KudProject/aur-src/linux-vk/sign_modules.sh
}
vk_install() { check_sudo --preserve-env=SCRIPTDIR,USER_DIR su -c "$(declare -f _vk_install) && _vk_install $1"; }

# Last, but my most convenient part; only apply with Bash
[[ -n $BASH ]] && export PS1='\[\e[1;36m\]\W\[\e[1;34m\]$(parse_git_branch)\[\e[0m\] âŒª'
