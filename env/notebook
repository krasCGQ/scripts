# shellcheck shell=bash
# Environment setup for my notebook
# Copyright (C) 2017-2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Set path to script directory depending on which shell we use
if [[ -n $BASH ]]; then
    # Bash
    SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
elif [[ -n $ZSH_VERSION ]]; then
    # Zsh
    # shellcheck disable=SC2154
    SCRIPT_DIR=$(dirname "${(%):-%x}")
else
    echo "! Unsupported shell. Exiting." >&2
    return 1
fi
SCRIPT_DIR=$(dirname "$SCRIPT_DIR")
export SCRIPT_DIR

# Initialize GNOME Keyring for non-GTK environments
[[ -n $DESKTOP_SESSION ]] && { eval "$(gnome-keyring-daemon --start)" && export SSH_AUTH_SOCK; }

# Import common environment script
# shellcheck source=/dev/null
source "$SCRIPT_DIR"/env/common

# Aliases
alias ak-build='$SCRIPT_DIR/tasks/kernel.bash'
alias neofetch='neofetch --os_arch off --speed_shorthand on --cpu_temp C --cpu_cores off --uptime_shorthand tiny --color_blocks off'
alias sys2sbin='sed -i "s|/system/bin/linker64|/sbin/linker64\x0\x0\x0\x0\x0\x0|g"'
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

# Export new PATH containing local binaries
[[ -z $TMUX ]] && export PATH=$HOME/.files/bin:$PATH

# Convert all FLAC, WAV, and/or AIFF files to Opus
opusConvert() {
    # Ask to install opus-tools package if opusenc doesn't exist
    [[ -z $(command -v opusenc) ]] && { prWarn "Please install opus-tools package before continuing." && return 1; }

    for SONG in ./*; do
        case "$SONG" in
        *.aiff | *.flac | *.wav)
            # Not supporting wildcards for converting
            opusenc --quiet --vbr --bitrate 192 --comp 10 --expect-loss 0 \
                "$SONG" "$(basename "$SONG" | sed 's/\(.*\)\..*/\1/').ogg" || return 1
            SUPPORTED=true
            ;;
        esac
    done

    # Return non-zero status if nothing to do
    if [[ -z $SUPPORTED ]]; then prWarn "There's nothing to do." && return 1; fi
}

# Setup zRAM to take the whole RAM size
function zramInit() { (
    [[ $(whoami) != root ]] && return 1
    local MEMSIZE
    # Get amount of physical memory (in kB)
    MEMSIZE=$(grep MemTotal /proc/meminfo | awk '{print $2$3}')

    # Turn off HDD swap first
    swapoff /dev/sda1

    # Setup zRAM as swap
    modprobe zram
    # Write same amount of physical memory
    echo "$MEMSIZE" >/sys/devices/virtual/block/zram0/disksize
    mkswap /dev/zram0
    swapon -p 100 /dev/zram0

    # Set swappiness to 100
    sysctl vm.swappiness=100
) || return 1; }
alias zramInit='chkSudo su -c "$(declare -f zramInit) && zramInit &> /dev/null"'

# De-init zRAM configuration set before
zramDeinit() { (
    [[ $(whoami) != root ]] && return 1

    # Turn off zRAM
    swapoff /dev/zram0
    rmmod zram

    # Turn back on HDD swap
    swapon -p -2 /dev/sda1

    # Set swappiness to 1
    sysctl vm.swappiness=1
) || return 0; } # suppress non-zero exit status
alias zramDeinit='chkSudo su -c "$(declare -f zramDeinit) && zramDeinit &> /dev/null"'

# Quick way to install MoeSyndrome Kernel packages
_vkInstall() {
    [[ $(whoami) != root ]] && return 1

    pacman -U /mnt/ssd/aur/linux-moesyndrome*"$1"-"$(uname -m)".pkg.tar*
    "$USER_DIR"/KudProject/aur-src/linux-vk/sign_modules.sh
}
vkInstall() { chkSudo --preserve-env=SCRIPT_DIR,USER_DIR su -c "$(declare -f _vkInstall) && _vkInstall $1"; }
