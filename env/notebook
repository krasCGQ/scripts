#!/hint/bash
# Environment setup for my notebook
# Copyright (C) 2017-2022 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Set path to script directory depending on which shell we use
if [[ -n $BASH ]]; then
    # Bash
    SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
elif [[ -n $ZSH_VERSION ]]; then
    # Zsh
    # shellcheck disable=SC2154
    SCRIPT_DIR=$(dirname "${(%):-%x}")
else
    echo "! Unsupported shell. Exiting." >&2
    return 1
fi
SCRIPT_DIR=$(dirname "$SCRIPT_DIR")
export SCRIPT_DIR

# Initialize GNOME Keyring for non-GTK environments
[[ -n $DESKTOP_SESSION ]] && { eval "$(gnome-keyring-daemon --start)" && export SSH_AUTH_SOCK; }

# Import common environment script
# shellcheck source=/dev/null
source "$SCRIPT_DIR"/env/common

# Aliases
alias ak-build='$SCRIPT_DIR/tasks/kernel.bash'
alias neofetch='neofetch --os_arch off --speed_shorthand on --cpu_temp C --cpu_cores off --uptime_shorthand tiny --color_blocks off'
alias sys2sbin='sed -i "s|/system/bin/linker64|/sbin/linker64\x0\x0\x0\x0\x0\x0|g"'
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

if [[ -z $TMUX ]]; then
    # Export new PATH containing local binaries
    [[ -d $HOME/.files ]] && PATH=$HOME/.files/bin:$PATH
    # Export new PATH containing Android SDK binaries
    ANDROID_SDK=/opt/android-sdk
    [[ -d $ANDROID_SDK/build-tools/30.0.2 ]] && PATH=$PATH:$ANDROID_SDK/build-tools/30.0.2
    [[ -d $ANDROID_SDK/platform-tools ]] && PATH=$PATH:$ANDROID_SDK/platform-tools
    unset ANDROID_SDK
    export PATH
fi

# Convert all FLAC, WAV, and/or AIFF files to Opus
opusConvert() {
    # Ask to install opus-tools package if opusenc doesn't exist
    [[ -z $(command -v opusenc) ]] && { prWarn "Please install opus-tools package before continuing." && return 1; }

    for SONG in ./*; do
        case "$SONG" in
        *.aiff | *.flac | *.wav)
            # Not supporting wildcards for converting
            opusenc --quiet --vbr --bitrate 192 --comp 10 --expect-loss 0 \
                "$SONG" "$(basename "$SONG" | sed 's/\(.*\)\..*/\1/').ogg" || return 1
            SUPPORTED=true
            ;;
        esac
    done

    # Return non-zero status if nothing to do
    if [[ -z $SUPPORTED ]]; then prWarn "There's nothing to do." && return 1; fi
}

# Setup zRAM to take the whole RAM size
alias zramInit &>/dev/null && unalias zramInit
function zramInit() { (
    [[ $(whoami) != root ]] && return 1
    local MEMSIZE
    # Get amount of physical memory (in kB)
    MEMSIZE=$(grep MemTotal /proc/meminfo | awk '{print $2$3}')

    # Turn off HDD swap first
    swapoff /dev/sda1

    # Setup zRAM as swap
    modprobe zram
    # Write same amount of physical memory
    echo "$MEMSIZE" >/sys/devices/virtual/block/zram0/disksize
    mkswap /dev/zram0
    swapon -p 100 /dev/zram0

    # Set swappiness to 100
    sysctl vm.swappiness=100
) || return 1; }
alias zramInit='chkSudo su -c "$(declare -f zramInit) && zramInit &> /dev/null"'

# De-init zRAM configuration set before
alias zramDeinit &>/dev/null && unalias zramDeinit
zramDeinit() { (
    [[ $(whoami) != root ]] && return 1

    # Turn off zRAM
    swapoff /dev/zram0
    rmmod zram

    # Turn back on HDD swap
    swapon -p -2 /dev/sda1

    # Set swappiness to 1
    sysctl vm.swappiness=1
) || return 0; } # suppress non-zero exit status
alias zramDeinit='chkSudo su -c "$(declare -f zramDeinit) && zramDeinit &> /dev/null"'

# Play from HDMI capture device using mpv
# NOTE: profile=capture-device is defined on dotfiles mpv.conf
playCapture() {
    PARAMS=()
    local DEVICE PARAMS

    if [[ -e /dev/v4l/by-id/usb-AVerMedia_AVerMedia_USB_Device_53106217017740-video-index0 ]]; then
        # Video4Linux v2 device and its audio sink
        DEVICE="AVerMedia_AVerMedia_USB_Device_53106217017740"
        # Use 1920x1080 output (mpv always picks up 640x480, doesn't happen with VLC)
        PARAMS+=("--demuxer-lavf-o-append=video_size=1920x1080")
    elif [[ -e /dev/v4l/by-id/usb-MACROSILICON_USB_Video-video-index0 ]]; then
        # Video4Linux v2 device and its audio sink
        DEVICE="MACROSILICON_USB_Video"
        # Explicitly use MJPEG output format (it defaults to H.264 1080p5)
        PARAMS+=("--demuxer-lavf-o-append=input_format=mjpeg")
        # Force 30 frames per second due to tearing issues with this capture device
        PARAMS+=("--demuxer-lavf-o-append=framerate=30")
        PARAMS+=("--fps=30")
        PARAMS+=("--override-display-fps=30")
    else
        prWarn "No capture device found for this session." && return
    fi

    mpv --profile=capture-device \
        --demuxer-lavf-o-append=timestamps=2 \
        "${PARAMS[@]}" \
        --audio-file=av://pulse:alsa_input.usb-"$DEVICE"-02.analog-stereo \
        av://v4l2:/dev/v4l/by-id/usb-"$DEVICE"-video-index0 \
        "$@"
}
