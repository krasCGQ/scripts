#!/hint/bash
#
# SPDX-FileCopyrightText: 2017-2022, 2024 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Treewide environment setup
#

# Text styles
if [[ -n $(command -v tput) ]]; then
    BLD=$(tput bold)
    RST=$(tput sgr0)
else
    BLD='\033[1m'
    RST='\033[0m'
fi
# Export variables to satisfy shellcheck requirements
export BLD RST

# Enable escape sequences on Bash
[[ -n $BASH ]] && alias echo='echo -e'

# Prints a message with a dash
prInfo() {
    echo "- $1"
    while [[ $# -ge 2 ]]; do
        echo "  $2"
        shift
    done
}

# Prints a message with an exclamation point
prWarn() {
    echo "! $1" >&2
    while [[ $# -ge 2 ]]; do
        echo "  $2" >&2
        shift
    done
}

# Making sure user has su rights before executing command
chkSudo() {
    prInfo "Checking for su rights; please enter password if prompted."
    if ! (sudo -v || doas true) 2>/dev/null; then
        prWarn "Current user doesn't have su rights!"
        return 1
    fi

    # We aren't gotta follow symlinks blindly
    if [[ $# != 0 ]]; then
        if sudo -v 2>/dev/null; then
            sudo "$@"
        elif doas true 2>/dev/null; then
            doas "$@"
        fi
    fi
}

# Check for system architecture support
chkArch() {
    ARCH=$(uname -m)
    for TARGET in "$@"; do
        [[ $ARCH == "$TARGET" ]] && break
    done
}

# Get Distro ID for functions that require them
getDistroID() {
    # Try to obtain Distro ID from /etc/os-release
    source <(grep '^ID' /etc/os-release 2>/dev/null)
    #
    # If Distro ID returns empty, check if this is a Termux environment.
    # This shouldn't interfere with (ch|pr)oot-ed environment
    #
    [[ -z $ID && -n $TERMUX_VERSION ]] && ID=termux

    echo "$ID"
}

# A wrapper so we don't redundantly create an alias to non-existing binary
createAlias() {
    local ALIAS COMMAND EXEC
    ALIAS=$1
    COMMAND=$2

    # Unset already set alias if present
    alias "$ALIAS" &>/dev/null && unalias "$ALIAS"
    # limit is rather arbitrary but we most likely won't pass 1337 parameters
    for NUM in {1..9}; do
        # Determine executable binary first
        EXEC=$(echo -n "$COMMAND" | cut -d\  -f"$NUM")
        # Proceed to next executable if we get superuser binary
        [[ $EXEC == chkSudo || $EXEC == sudo || $EXEC == doas ]] && continue
        # Also if we encounter environment variables being set at the beginning
        [[ $EXEC =~ = ]] && continue
        # Bail out silently if target binary doesn't exist or isn't executable
        [[ -x $(command -v "$EXEC") ]] && break || return
    done
    # To avoid SC2139 (warning): This expands when defined, not when used. Consider escaping.
    eval "alias $ALIAS='$COMMAND'"
}

createSelfAlias() {
    # Shortcut to create an alias to binary itself, done to avoid redefining most stuffs above
    createAlias "$1" "$1 $2"
}
