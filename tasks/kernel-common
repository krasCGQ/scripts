# shellcheck shell=bash
# Common kernel functions
# Copyright (C) 2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Exit if it's being executed
if ! (return 2>/dev/null); then
    echo "! Please source this script instead of running directly." >&2
    exit 126
fi

## Import common environment script
# shellcheck source=/dev/null
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/../env/common

## Functions

# Show build script duration
show_duration() { date -ud @$(($(date +%s) - START_TIME)) +'%M:%S (mm:ss)'; }

# Get supported AOSP Clang version
get_clang-ver() {
    local QTI_VERSION
    ROOT_DIR=/opt/kud/android

    case $1 in
    5) CLANG_VERSION=4053586 ;;   # 5.0.300080
    6) CLANG_VERSION=4691093 ;;   # 6.0.2
    7) CLANG_VERSION=r328903 ;;   # 7.0.2
    8) CLANG_VERSION=r349610b ;;  # 8.0.9
    9) CLANG_VERSION=r365631c2 ;; # 9.0.8
    10) CLANG_VERSION=r377782d ;; # 10.0.6
    11) CLANG_VERSION=r399163b ;; # 11.0.5
    qti-*)
        QTI_VERSION=${1/*-/}
        case $QTI_VERSION in
        6 | 8 | 10) ;; # do nothing; this is just to trap invalid version
        *) prWarn "Invalid version specified!" && exit 1 ;;
        esac
        CLANG_PATH=$ROOT_DIR/sdclang-$QTI_VERSION.0
        CLANG_VERSION=qti
        ;;
    *) prWarn "Invalid version specified!" && exit 1 ;;
    esac

    [[ -z $CLANG_PATH ]] && CLANG_PATH=$ROOT_DIR/clang-$CLANG_VERSION
    [[ ! -x $CLANG_PATH/bin/clang ]] && { prWarn "Clang ${BLD}$CLANG_VERSION$RST doesn't exist in defined path nor executable." && exit 1; }
    export CLANG_PATH
}

# Run this inside kernel source
if ! [[ -f Makefile && -d kernel ]]; then
    prWarn "Please run this script inside kernel source folder!"
    exit 1
fi

# Get kernel release - idea stolen from scripts/patch-kernel
# shellcheck disable=SC1090
source <(grep -E '^(VERSION|PATCHLEVEL)' Makefile | sed -e s/[[:space:]]//g)
if ! [[ -n $VERSION && -n $PATCHLEVEL ]]; then
    prWarn "Unable to get kernel version from Makefile!"
    exit 1
fi
