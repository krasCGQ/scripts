# shellcheck shell=bash
# Kernel versioning (branding)
# Copyright (C) 2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Exit if it's being executed
if ! (return 2>/dev/null); then
    echo "! Please source this script instead of running directly." >&2
    exit 126
fi

# I endorse you to change variables here before even sourcing this script
[[ $KBUILD_BUILD_USER == krasCGQ && $KBUILD_BUILD_HOST == KudProject ]] || return

# Flag that this script is sourced
RELEASE_SOURCED=true
# Base download site URL, for saving space
BASE_URL=https://kudnet.id
# Key pair used to sign resulting kernel zip; fallback to AOSP test-keys if left empty
KEY_PAIR=/mnt/ssd/android/aimrom-q/vendor/kud/build/target/product/security/releasekey
# Export variables to satisfy shellcheck requirements
export RELEASE_SOURCED KEY_PAIR

# Kernel branding
setBranding() {
    # MoeSyndrome Kernel is only available for the following devices
    case $DEVICE in
    grus | mido) KERNEL_NAME=MoeSyndrome ;;
    *) return 1 ;;
    esac
    # Define which variant we're building
    if [[ $DEVICE == mido && $KERNEL == 3.18 ]]; then
        # Legacy kernel; maintenance support only
        KERNEL_TYPE=legacy
    else
        # If branch name contains word "custom", it's custom kernel otherwise vanilla (stock)
        [[ $(git rev-parse) =~ custom ]] && KERNEL_TYPE=custom || KERNEL_TYPE=vanilla
    fi
    export NAME=$KERNEL_NAME-$KERNEL_TYPE
}

# Generate FKM-compatible JSON
genFkmJson() {
    local CHANGELOG DATE JSON LINK SHA1 SUPPORT_LINK
    # Specific kernel properties
    # VERSION will use one defined from main kernel script generated by `make kernelrelease`
    LINK=$BASE_URL/downloads/kernels/$DEVICE/$KERNEL_TYPE/${ZIP/-unsigned/}
    CHANGELOG=$BASE_URL/ota/kernel/$DEVICE/changelog-$KERNEL_TYPE.md
    DATE=$(date +%Y-%m-%d)
    SHA1=$(sha1sum "$AK/${ZIP/-unsigned/}" | cut -d' ' -f1)
    # Blank this if no support is going to be provided
    SUPPORT_LINK=https://t.me/joinchat/DX68OlGQPEd7y8VOmc67Eg

    JSON=$(printf '"kernel": { "name": "%s Kernel (%s)", "version": "%s", "link": "%s", "changelog_url": "%s", "date": "%s", "sha1": "%s" }' \
        "$KERNEL_NAME" "${KERNEL_TYPE^}" "$UTS_RELEASE" "$LINK" "$CHANGELOG" "$DATE" "$SHA1")
    [[ -n $SUPPORT_LINK ]] && JSON+=$(printf ', "support": { "link": "%s" }' "$SUPPORT_LINK")

    prInfo "Creating compatible FKM updater JSON..."
    echo "{ $JSON }" | jq >/tmp/"$DEVICE".json
    if [[ $UPLOAD_TYPE == release ]] && {
        rsync -qP --mkpath /tmp/"$DEVICE".json krascgq@kudnet.id:/srv/http/ota/kernel/"$DEVICE"/$KERNEL_TYPE.json
    }; then
        prInfo "JSON created and uploaded."
        rm /tmp/"$DEVICE".json
    else
        prInfo "JSON created and available on /tmp/$DEVICE.json."
    fi
}

# Kernel upload
kernUpload() {
    if [[ $UPLOAD_TYPE == ci ]]; then
        # To Telegram
        prInfo "Uploading $ZIP to Telegram..."
        tgPost "*[BuildCI]* Uploading test build..." &
        if ! "$TELEGRAM" -f "$AK/$ZIP" -c "-1001494373196" \
            "New #$DEVICE test build ($KERNEL) with branch $BRANCH at commit $(git_pretty)."; then
            prWarn "Failed to upload $ZIP."
            tgPost "*[BuildCI]* Unable to upload the build." &
        fi
    elif [[ $UPLOAD_TYPE == release ]]; then
        # or to webserver for release zip
        (
            local DEVICE_CHAT MEGA_URL

            # Unlikely to fail; but we have to define this way to satisfy shellcheck
            cd "$AK" || die "$BLD$(basename "$AK")$RST doesn't exist in defined path."

            prInfo "Uploading ${ZIP/-unsigned/}..."
            if {
                rsync -qP --mkpath "${ZIP/-unsigned/}" krascgq@kudnet.id:/srv/downloads/kernels/"$DEVICE"/$KERNEL_TYPE/
                mega-put -c "${ZIP/-unsigned/}" /Public/KudProject/kernels/"$DEVICE"/$KERNEL_TYPE/
            }; then
                prInfo "${ZIP/-unsigned/} uploaded to webserver and MEGA successfully."
                MEGA_URL=$(mega-export -a /Public/KudProject/kernels/"$DEVICE"/$KERNEL_TYPE/"${ZIP/-unsigned/}" |
                    cut -d':' -f2- | sed -e 's/[[:space:]]//')
                [[ $DEVICE == grus ]] && DEVICE_CHAT="-1001327366938"
                TELEGRAM_CHAT="-1001074672983 $DEVICE_CHAT" \
                    tgPost "*New $KERNEL_NAME Kernel build is available!*" \
                    "" \
                    "*Name:* \`${ZIP/-unsigned/}\`" \
                    "*Build Date:* \`$(sed '4q;d' "$OUT"/include/generated/compile.h | cut -d ' ' -f 6- | sed -e s/\"//)\`" \
                    "*Downloads:* [Webserver]($BASE_URL/downloads/kernels/$DEVICE/$KERNEL_TYPE/${ZIP/-unsigned/}) | [MEGA]($MEGA_URL)" \
                    "*Changelog:* [Here]($BASE_URL/ota/kernel/$DEVICE/changelog-$KERNEL_TYPE.md)" \
                    "" \
                    "#$DEVICE" &
            else
                prWarn "Failed to upload ${ZIP/-unsigned/}."
                unset UPLOAD_TYPE
            fi
        )
    else
        prWarn "\"$UPLOAD_TYPE\" is invalid upload type. Skipping."
        unset UPLOAD_TYPE
    fi
}
