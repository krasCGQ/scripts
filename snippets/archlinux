#!/hint/bash
# Arch Linux-specific snippets
# Copyright (C) 2021-2022 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# A wannabe rankmirrors that doesn't expect repository name being exist on URI
# Usage: rankMirrors <repo name> <mirrorlist or stdin>
rankMirrors() {
    local ARCH MIRRORLIST NEW_URL OLD_URL OUT REPO REPO_URL RESULT STATUS URL
    OUT=/tmp/$0
    REPO=$1
    MIRRORLIST=$2
    ARCH=$(uname -m)

    # Bail out early if no repo name
    [[ -z $REPO ]] && { prWarn "Incorrect usage!" && return 1; }

    # Parse every URL in the mirrorlist
    while read -r URL; do
        # Skip empty lines; no point on checking that
        [[ -z $URL ]] && continue
        # Convert to base repository URL
        REPO_URL=$(echo "$URL" | sed -e "s/\$repo/$REPO/" -e "s/\$arch/$ARCH/")
        STATUS=$(curl -sw '%{http_code}' "$REPO_URL"/ -o /dev/null)
        if [[ $STATUS =~ 30[12378]{1} ]]; then
            # Handle redirections here as tracking can't be done while following it
            OLD_URL=$(echo "$REPO_URL" | cut -d'/' -f3)
            NEW_URL=$(curl -sI "$REPO_URL" | grep -iw location: | cut -d' ' -f2 | cut -d'/' -f3)
            REPO_URL=${REPO_URL/$OLD_URL/$NEW_URL}
        elif [[ $STATUS != 200 ]]; then
            # Server is either unreachable, has internal problem, or we're not allowed to use it
            continue
        fi
        # Track status code and time required to download database
        RESULT=$(curl -sw '%{time_total} %{http_code}' "$REPO_URL"/"$REPO".db -o /dev/null)
        # Only save to temporary file if it can be downloaded
        [[ $(echo "$RESULT" | cut -d' ' -f2) -eq 200 ]] && echo "$RESULT $URL" >>"$OUT"
    done < <(cut -d' ' -f3 "$MIRRORLIST" 2>/dev/null)
    [[ ! -f $OUT ]] && { prWarn "Nothing to rank?" && return 1; }

    # Convert back and rank mirrors by fastest download time
    while read -r URL; do
        echo "Server = $URL"
    done < <(sort -n "$OUT" | cut -d' ' -f3)
    # Delete temporary file afterwards
    rm "$OUT"
}

# Filter an existing mirrorlist to only include exactly one protocol from same server
# Usage: filterMirrorlist <mirrorlist>
filterMirrorlist() {
    local DEL LINE MIRRORLIST NEXT_SRV PREV_PROTO PREV_SRV SED
    MIRRORLIST=$1

    # Bail out early if path to mirrorlist isn't supplied
    [[ -z $MIRRORLIST ]] && { prWarn "Incorrect usage!" && return 1; }

    # seq allows dynamic number of lines to be checked
    for LINE in $(seq "$(wc <"$MIRRORLIST" -l)"); do
        PREV_SRV=$(sed "${LINE}q;d" "$MIRRORLIST" | cut -d'/' -f3)
        NEXT_SRV=$(sed "$((LINE + 1))q;d" "$MIRRORLIST" | cut -d'/' -f3)
        # If server name doesn't match between the two, don't proceed any further
        [[ $PREV_SRV != "$NEXT_SRV" ]] && continue

        PREV_PROTO=$(sed "${LINE}q;d" "$MIRRORLIST" | cut -d':' -f1 | cut -d' ' -f3)
        # Determine which line to be discarded, that's HTTP
        [[ $PREV_PROTO == http ]] && DEL=$LINE || DEL=$((LINE + 1))
        # We discard this HTTP version
        SED+=(-e "${DEL}"d)
    done
    # Write the result to exact same mirrorlist file, overwriting it
    # FIXME: sed: can't read : No such file or directory
    sed "${SED[@]}" -i "$MIRRORLIST" 2>/dev/null
    return 0
}

# To check whether a specific repo has mirrorlist package installed or file exists
# This function will read exactly one argument and specifying nothing always returns false
# Usage: isMirrorlistExist <repo> (don't specify `-mirrorlist` at the end!)
isMirrorlistExist() {
    local REPO
    REPO=$1

    [[ -n $REPO ]] && {
        pacman -Qq "$REPO"-mirrorlist &>/dev/null || test -f /etc/pacman.d/"$REPO"-mirrorlist
    }
}

# sudo: Update Arch Linux (CN) mirrorlist, sorted by the fastest
alias updMirrorlist &>/dev/null && unalias updMirrorlist
updMirrorlist() {
    local ID REPO
    chkArch x86_64 || { [[ -n $IS_TERMUX ]] && return 1 || exit 1; }
    ID=$(getDistroID)

    # Prevent executing on anything other than Arch and Manjaro
    case $ID in
    arch | manjaro) ;; # ignore
    *) prWarn "This function is only available for Arch and Manjaro." && { [[ -n $IS_TERMUX ]] && return 1 || exit 1; } ;;
    esac

    ## Official repositories:
    prInfo "Updating official mirrorlist..."
    case $ID in
    arch)
        if curl -s https://archlinux.org/mirrorlist/\?use_mirror_status=on >/tmp/arch-mirrorlist; then
            # Delete every single comment then uncomment all server lists
            sed -e /##/d -e s/#Server/Server/g -i /tmp/arch-mirrorlist
            # Filter HTTP mirrors out when HTTPS counterparts are available
            filterMirrorlist /tmp/arch-mirrorlist
            # Prefer rankmirrors script provided by pacman-contrib, as rankMirrors() is still too
            # slow even when almost a third have been filtered out. This also allows interrupting
            # the ranking process without ended up having no listed servers; something currently not
            # implemented by the latter.
            {
                if pacman -Qq pacman-contrib &>/dev/null || command -v rankmirrors >/dev/null; then
                    rankmirrors /tmp/arch-mirrorlist
                else
                    prWarn "Continuing with rankMirrors() (most likely very slow)..."
                    # core repository has the smallest database size
                    rankMirrors core /tmp/arch-mirrorlist
                fi
            } >/etc/pacman.d/mirrorlist
            rm /tmp/arch-mirrorlist
        else
            prWarn "Unable to retrieve mirrorlist to rank, skipping."
        fi
        ;;
    # Use official pacman-mirrors tool installed by default on Manjaro
    manjaro) pacman-mirrors --fasttrack -q ;;
    esac

    # CachyOS
    for REPO in cachyos{,-v3}; do
        if isMirrorlistExist $REPO; then
            prInfo "Updating CachyOS mirrorlist ($REPO)..."
            curl -s https://gitlab.com/cachyos/PKGBUILDS/-/raw/master/$REPO-mirrorlist/$REPO-mirrorlist |
                sed /##/d | rankMirrors ${REPO/os/os-desktop} - >/etc/pacman.d/$REPO-mirrorlist
        fi
    done

    # Chaotic-AUR - discard both geo-located and CDN mirrors
    if isMirrorlistExist chaotic; then
        prInfo "Updating Chaotic-AUR mirrorlist..."
        curl -s https://aur.chaotic.cx/mirrorlist.txt |
            sed -e s/#Server/Server/g -e /geo-mirror/d -e /cdn-mirror/d -e '/# /d' |
            rankMirrors chaotic-aur - >/etc/pacman.d/chaotic-mirrorlist
    fi

    # Arch Linux CN
    if isMirrorlistExist archlinuxcn; then
        prInfo "Updating Arch Linux CN mirrorlist..."
        curl -s https://raw.githubusercontent.com/archlinuxcn/mirrorlist-repo/master/archlinuxcn-mirrorlist |
            sed -e s/#Server/Server/g -e /##/d |
            rankMirrors archlinuxcn - >/etc/pacman.d/archlinuxcn-mirrorlist
    fi

    prInfo "Done."
}
alias updMirrorlist='chkSudo su -c ". $SCRIPT_DIR/env/global && $(declare -f filterMirrorlist getDistroID isMirrorlistExist rankMirrors updMirrorlist) && updMirrorlist"'
