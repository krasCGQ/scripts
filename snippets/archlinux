#!/hint/bash
# Arch Linux-specific snippets
#
# Copyright (C) 2021-2023 Albert I (krasCGQ)
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

# A wannabe rankmirrors that doesn't expect repository name being exist on URL
# Usage: _rank_mirrors <repo name> <mirrorlist or stdin>
_rank_mirrors() {
    local ARCH MIRRORLIST NEW_URL OLD_URL OUT REPO REPO_URL RESULT STATUS
    OUT=/tmp/$0
    REPO=$1
    MIRRORLIST=$2
    ARCH=$(uname -m)
    readonly ARCH MIRRORLIST OUT REPO

    # Bail out early if no repo name
    [[ -z $REPO ]] && { prWarn "Incorrect usage!" && return 1; }

    # Parse every URL in the mirrorlist
    while IFS= read -r MIRROR; do
        # Sanitize output by skipping empty lines
        [[ -z $MIRROR ]] && continue
        # Convert to base repository URL
        REPO_URL=$(echo "$MIRROR" | sed -e "s/\$repo/$REPO/" -e "s/\$arch/$ARCH/")
        STATUS=$(curl -s -w '%{http_code}' "$REPO_URL/" -o /dev/null)
        if [[ $STATUS =~ 30[12378]{1} ]]; then
            # Handle redirections here as tracking can't be done while following it
            OLD_URL=$(echo "$REPO_URL" | cut -d'/' -f3)
            NEW_URL=$(curl -s -I "$REPO_URL" | grep -i -w location: | cut -d' ' -f2 |
                sed -e 's|http[s?]://||' -e "s|/$REPO||" -e "s|/$ARCH||" -e 's/[[:space:]]//g')
            REPO_URL=${REPO_URL/$OLD_URL/$NEW_URL}
        elif [[ $STATUS != 200 ]]; then
            # Server is either unreachable, has internal problem, or we're not allowed to use it
            continue
        fi
        # Track status code and time required to download database
        RESULT=$(curl -s -w '%{time_total} %{http_code}' "$REPO_URL/$REPO.db" -o /dev/null)
        # Only save to temporary file if it can be downloaded
        [[ $(echo "$RESULT" | cut -d' ' -f2) -eq 200 ]] && echo "$RESULT $MIRROR" >>"$OUT"
    done < <(cut -d' ' -f3 "$MIRRORLIST" 2>/dev/null)
    [[ ! -f $OUT ]] && { prWarn "Nothing to rank?" && return 1; }

    # Convert back and rank mirrors by fastest download time
    while read -r MIRROR; do
        echo "Server = $MIRROR"
    done < <(sort -n "$OUT" | cut -d' ' -f3)
    # Delete temporary file afterwards
    rm -f "$OUT"
}

# To check whether a specific repo has mirrorlist package installed or file exists
# This function will read exactly one argument and specifying nothing always returns false
# Usage: _check_mirrorlist <repo> (don't specify `-mirrorlist` at the end!)
_check_mirrorlist() {
    local REPO
    readonly REPO=$1

    [[ -n $REPO ]] && {
        pacman -Qq "$REPO-mirrorlist" &>/dev/null || test -f "/etc/pacman.d/$REPO-mirrorlist"
    }
}

# Replicate behavior of Arch Linux's use_mirror_status flag for use with repositories that provide
# Unix timestamp of the latest mirror update
# Usage: _filter_by_mirror_status <reference-url without /lastupdate> <mirrorlist-file or stdout>
_filter_by_mirror_status() {
    local HAS_REPO_PLACEHOLDER LAST_UPDATED MIRROR MIRRORLIST REFERENCE_URL SANITIZED_MIRROR
    REFERENCE_URL=$1
    MIRRORLIST=$2
    # Fetch the reference mirror's Unix timestamp, this is assumed to be latest
    LAST_UPDATED=$(curl -s -L "$REFERENCE_URL/lastupdate")
    # Mark variables read-only from this point on
    readonly LAST_UPDATED MIRRORLIST REFERENCE_URL

    # Bail out if we are unable to fetch it, since it'll be awkward
    [[ -n $LAST_UPDATED ]] ||
        { prWarn "Unable to determine last updated timestamp. Aborting." && return 1; }

    while IFS= read -r MIRROR; do
        # Sanitize output by skipping empty lines
        [[ -n $MIRROR ]] || continue
        # Set flag if this mirror has "$repo" placeholder
        [[ $MIRROR =~ "\$repo" ]] && HAS_REPO_PLACEHOLDER=1
        # Add directly to filtered output if we encounter the main mirror
        if ! [[ $MIRROR =~ $REFERENCE_URL ]]; then
            # This is stupid since $(basename) built-in shell command is meant to get file name from
            # a defined path, but it always works on anything as long as it contains slashes
            SANITIZED_MIRROR=${HAS_REPO_PLACEHOLDER:+${MIRROR/\$repo/"$(basename "$REFERENCE_URL")"}}
            # Just copy MIRROR to SANITIZED_MIRROR if this is empty so we don't bail out
            SANITIZED_MIRROR=${SANITIZED_MIRROR:-$MIRROR}
            # Fetch the mirror's Unix timestamp
            MIRROR_TIMESTAMP=$(curl -s -L "${SANITIZED_MIRROR/\$arch/lastupdate}")
            # Skip this mirror if it's either inaccessible or returns an invalid value
            [[ -n $MIRROR_TIMESTAMP && -z ${MIRROR_TIMESTAMP//[0-9]/} ]] || continue
            # Also do the same if the mirror is older than reference
            [[ $MIRROR_TIMESTAMP -ge $LAST_UPDATED ]] || continue
        fi
        # Print this latest mirror to stdout
        echo "Server = $MIRROR"
        # Unset flag before moving to next mirror entry
        unset HAS_REPO_PLACEHOLDER
    done < <(cut -d' ' -f3 "$MIRRORLIST" 2>/dev/null)
}

# sudo: Update Arch Linux (CN) mirrorlist, sorted by the fastest
alias updMirrorlist &>/dev/null && unalias updMirrorlist
updMirrorlist() {
    local ID REPO
    chkArch x86_64 || exit 1
    ID=$(getDistroID)
    readonly ID

    # Prevent executing on anything other than Arch and Manjaro
    case $ID in
    arch | manjaro) ;; # ignore
    *) prWarn "This function is only available for Arch and Manjaro." && exit 1 ;;
    esac

    ## Official repositories:
    prInfo "Updating official mirrorlist..."
    case $ID in
    arch)
        if curl -s https://archlinux.org/mirrorlist/\?protocol=https\&use_mirror_status=on >/tmp/arch-mirrorlist; then
            # Delete every single comment then uncomment all server lists
            sed -e /##/d -e s/#Server/Server/g -i /tmp/arch-mirrorlist
            # Known to peer one or more out-of-date mirrors despite being considered otherwise
            sed -e /i3d.net/d -i /tmp/arch-mirrorlist
            # Prefer rankmirrors script provided by pacman-contrib, as _rank_mirrors() is still too
            # slow even when almost a third have been filtered out. This also allows interrupting
            # the ranking process without ended up having no listed servers; something currently not
            # implemented by the latter.
            {
                if pacman -Qq pacman-contrib &>/dev/null || command -v rankmirrors >/dev/null; then
                    rankmirrors /tmp/arch-mirrorlist
                else
                    prWarn "Continuing with rankMirrors() (most likely very slow)..."
                    # core repository has the smallest database size
                    _rank_mirrors core /tmp/arch-mirrorlist
                fi
            } >/etc/pacman.d/mirrorlist
            rm -f /tmp/arch-mirrorlist
        else
            prWarn "Unable to retrieve mirrorlist to rank, skipping."
        fi
        ;;
    # Use official pacman-mirrors tool installed by default on Manjaro
    manjaro) pacman-mirrors --fasttrack -q ;;
    esac

    # CachyOS
    for REPO in cachyos{,-v3}; do
        if _check_mirrorlist "$REPO"; then
            prInfo "Updating CachyOS mirrorlist ($REPO)..."
            curl -s "https://gitlab.com/cachyos/PKGBUILDS/-/raw/master/$REPO-mirrorlist/$REPO-mirrorlist" |
                sed /##/d | _rank_mirrors "${REPO/os/os-desktop}" - >"/etc/pacman.d/$REPO-mirrorlist"
        fi
    done

    # Chaotic-AUR - discard both geo-located and CDN mirrors
    if _check_mirrorlist chaotic; then
        prInfo "Updating Chaotic-AUR mirrorlist..."
        curl -s https://aur.chaotic.cx/mirrorlist.txt |
            sed -e /geo-mirror/d -e /cdn-mirror/d -e '/# /d' |
            _filter_by_mirror_status https://cdn-mirror.chaotic.cx/no-failover/chaotic-aur - |
            _rank_mirrors chaotic-aur - >/etc/pacman.d/chaotic-mirrorlist
    fi

    # Arch Linux CN
    if _check_mirrorlist archlinuxcn; then
        prInfo "Updating Arch Linux CN mirrorlist..."
        curl -s https://raw.githubusercontent.com/archlinuxcn/mirrorlist-repo/master/archlinuxcn-mirrorlist |
            sed -e s/#\ Server/Server/g -e /repo.archlinuxcn/d -e /##/d |
            _filter_by_mirror_status https://repo.archlinuxcn.org - |
            _rank_mirrors archlinuxcn - >/etc/pacman.d/archlinuxcn-mirrorlist
    fi

    prInfo "Done."
}
alias updMirrorlist='chkSudo su -c ". $SCRIPT_DIR/env/global && $(declare -f _check_mirrorlist _filter_by_mirror_status _rank_mirrors getDistroID updMirrorlist) && updMirrorlist"'
