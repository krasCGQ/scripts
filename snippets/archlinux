#!/hint/bash
#
# SPDX-FileCopyrightText: 2021-2025 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Arch Linux-specific snippets
#

# A wannabe rankmirrors that doesn't expect repository name being exist on URL
# Usage: _rank_mirrors <repo name> <mirrorlist or stdin>
_rank_mirrors() {
    local ARCH MIRRORLIST NEW_URL OLD_URL OUT REPO REPO_URL RESULT STATUS
    OUT=/tmp/$0
    REPO=$1
    MIRRORLIST=$2
    ARCH=$(uname -m)
    readonly ARCH MIRRORLIST OUT REPO

    # Bail out early if no repo name
    [[ -z $REPO ]] && { _pr_warn "Incorrect usage!" && return 1; }

    # Parse every URL in the mirrorlist
    while IFS= read -r MIRROR; do
        # Sanitize output by skipping empty lines
        [[ -z $MIRROR ]] && continue
        # Convert to base repository URL
        REPO_URL=$(echo "$MIRROR" | sed -e "s/\$repo/$REPO/" -e "s/\$arch/$ARCH/")
        STATUS=$(curl -s -w '%{http_code}' "$REPO_URL/" -o /dev/null)
        if [[ $STATUS =~ 30[12378]{1} ]]; then
            # Handle redirections here as tracking can't be done while following it
            OLD_URL=$(echo "$REPO_URL" | cut -d'/' -f3)
            NEW_URL=$(curl -s -L -I "$REPO_URL" | grep -i -w location: | cut -d \  -f 2 | tail -1 |
                sed -e 's|\(https*\)://||' -e "s|/$REPO||" -e "s|/$ARCH||" -e 's/[[:space:]]//g')
            REPO_URL=${REPO_URL/$OLD_URL/$NEW_URL}
        elif [[ $STATUS != 200 ]]; then
            # Server is either unreachable, has internal problem, or we're not allowed to use it
            continue
        fi
        # Track status code and time required to download database
        RESULT=$(curl -s -w '%{time_total} %{http_code}' "$REPO_URL/$REPO.db" -o /dev/null)
        # Only save to temporary file if it can be downloaded
        [[ $(echo "$RESULT" | cut -d' ' -f2) -eq 200 ]] && echo "$RESULT $MIRROR" >>"$OUT"
    done < <(cut -d' ' -f3 "$MIRRORLIST" 2>/dev/null)
    [[ ! -f $OUT ]] && { _pr_warn "Nothing to rank?" && return 1; }

    # Convert back and rank mirrors by fastest download time
    while read -r MIRROR; do
        echo "Server = $MIRROR"
    done < <(sort -n "$OUT" | cut -d' ' -f3)
    # Delete temporary file afterwards
    rm -f "$OUT"
}

# To check whether a specific repo has mirrorlist package installed or file exists
# This function will read exactly one argument and specifying nothing always returns false
# Usage: _check_mirrorlist <repo> (don't specify `-mirrorlist` at the end!)
_check_mirrorlist() {
    local REPO
    readonly REPO=$1

    [[ -n $REPO ]] && {
        pacman -Qq "$REPO-mirrorlist" &>/dev/null || test -f "/etc/pacman.d/$REPO-mirrorlist"
    }
}

# Replicate behavior of Arch Linux's use_mirror_status flag for use with repositories that provide
# Unix timestamp of the latest mirror update
# Usage: _filter_by_mirror_status <reference-url without /lastupdate> <mirrorlist-file or stdout>
_filter_by_mirror_status() {
    local HAS_REPO_PLACEHOLDER LAST_UPDATED MIRROR MIRRORLIST REFERENCE_URL SANITIZED_MIRROR
    REFERENCE_URL=$1
    MIRRORLIST=$2
    # Fetch the reference mirror's Unix timestamp, this is assumed to be latest
    LAST_UPDATED=$(curl -s -L "$REFERENCE_URL/lastupdate")
    # Mark variables read-only from this point on
    readonly LAST_UPDATED MIRRORLIST REFERENCE_URL

    # Bail out if we are unable to fetch it, since it'll be awkward
    [[ -n $LAST_UPDATED ]] ||
        { _pr_warn "Unable to determine last updated timestamp. Aborting." && return 1; }

    while IFS= read -r MIRROR; do
        # Sanitize output by skipping empty lines
        [[ -n $MIRROR ]] || continue
        # Set flag if this mirror has "$repo" placeholder
        [[ $MIRROR =~ "\$repo" ]] && HAS_REPO_PLACEHOLDER=1
        # Add directly to filtered output if we encounter the main mirror
        if ! [[ $MIRROR =~ $REFERENCE_URL ]]; then
            # This is stupid since $(basename) built-in shell command is meant to get file name from
            # a defined path, but it always works on anything as long as it contains slashes
            SANITIZED_MIRROR=${HAS_REPO_PLACEHOLDER:+${MIRROR/\$repo/"$(basename "$REFERENCE_URL")"}}
            # Just copy MIRROR to SANITIZED_MIRROR if this is empty so we don't bail out
            SANITIZED_MIRROR=${SANITIZED_MIRROR:-$MIRROR}
            # Fetch the mirror's Unix timestamp
            MIRROR_TIMESTAMP=$(curl -s -L "${SANITIZED_MIRROR/\$arch/lastupdate}")
            # Skip this mirror if it's either inaccessible or returns an invalid value
            [[ -n $MIRROR_TIMESTAMP && -z ${MIRROR_TIMESTAMP//[0-9]/} ]] || continue
            # Also do the same if the mirror is older than reference
            [[ $MIRROR_TIMESTAMP -ge $LAST_UPDATED ]] || continue
        fi
        # Print this latest mirror to stdout
        echo "Server = $MIRROR"
        # Unset flag before moving to next mirror entry
        unset HAS_REPO_PLACEHOLDER
    done < <(cut -d' ' -f3 "$MIRRORLIST" 2>/dev/null)
}

# sudo: Update Arch Linux (CN) mirrorlist, sorted by the fastest
alias updMirrorlist &>/dev/null && unalias updMirrorlist
updMirrorlist() {
    local COS_UPDATE_LATER ID LEVEL
    _assert_arch x86_64 || exit 1
    ID=$(get_distid)
    readonly ID

    case $ID in
    arch | cachyos | manjaro) ;; # Supported Linux distros; ignore
    *) _pr_warn "This function is only available for Arch, CachyOS and Manjaro." && exit 1 ;;
    esac

    ## Official repositories:
    case $ID in
    cachyos)
        if pacman -Qq cachyos-rate-mirrors &>/dev/null; then
            # Pretend that we are currently on Live ISO so only CachyOS mirrors will be updated
            mkdir /run/archiso

            # Ensure we have updated mirrorlist to rank
            curl -s https://raw.githubusercontent.com/CachyOS/CachyOS-PKGBUILDS/master/cachyos-mirrorlist/cachyos-mirrorlist \
                 -o /etc/pacman.d/cachyos-mirrorlist

            _pr_info "Updating CachyOS mirrorlist..."
            if cachyos-rate-mirrors &>/dev/null; then
                for LEVEL in 3 4; do
                    # Only keep level-specific mirrorlist(s) if they are actually installed
                    pacman -Qq cachyos-v$LEVEL-mirrorlist &>/dev/null ||
                        rm -f /etc/pacman.d/cachyos-v$LEVEL-mirrorlist
                done
            else
                _pr_warn "cachyos-rate-mirrors failed to execute properly. Trying again later..."
                COS_UPDATE_LATER=1
            fi

            # Script execution done, so remove the bogus directory
            rm -r -f /run/archiso
        else
            _pr_warn "CachyOS detected, but cachyos-rate-mirrors is not installed. Continuing..."
            COS_UPDATE_LATER=1
        fi
        ;&
    arch)
        #
        # Regardless of which method ends up being used to fetch latest mirrorlist, these mirrors
        # are always avoided due to varying degree of problems:
        # * i3d.net : Known to peer out-of-date mirrors despite being considered otherwise
        # * jingk.ai: Random files keep getting missing on the otherwise up-to-date mirror
        #
        # Reflector can be instructed to exclude these mirrors when filtering available mirrors,
        # while for the old school method we have to do it ourselves later on.
        #
        _pr_info "Updating Arch Linux mirrorlist..."

        # Use Reflector when available
        if pacman -Qq reflector &>/dev/null || command -v reflector >/dev/null; then
            reflector --save /tmp/arch-mirrorlist --delay 1 -x 'i3d.net|jingk.ai' -p https
            # Remove all comments and empty lines, otherwise rankmirrors will pass them through
            sed '/^#/d;/^$/d' -i /tmp/arch-mirrorlist

        # This is obviously the old school method and what most people will end up with
        elif curl -s 'https://archlinux.org/mirrorlist/?protocol=https&use_mirror_status=on' \
            -o /tmp/arch-mirrorlist; then
            # Delete all comments and empty lines, then uncomment all server lists
            sed '/^##/d;/^$/d;s/#Server/Server/g' -i /tmp/arch-mirrorlist
            # See comments above on why these mirrors are filtered out
            sed '/i3d.net/d;/jingk.ai/d' -i /tmp/arch-mirrorlist
        fi

        if [[ -f /tmp/arch-mirrorlist ]] && grep -q '^Server = ' /tmp/arch-mirrorlist; then
            # Add CachyOS mirror into server list
            echo 'Server = https://archlinux.cachyos.org/repo/$repo/os/$arch' >>/tmp/arch-mirrorlist

            # Prefer rankmirrors script provided by pacman-contrib, as _rank_mirrors() is still too
            # slow even when almost a third have been filtered out. This also allows interrupting
            # the ranking process without ended up having no listed servers; something currently not
            # implemented by the latter.
            {
                if pacman -Qq pacman-contrib &>/dev/null || command -v rankmirrors >/dev/null; then
                    rankmirrors /tmp/arch-mirrorlist
                else
                    _pr_warn "Falling back to built-in function (warning: very slow)..."
                    # [core] has the smallest database size, so test against that
                    _rank_mirrors core /tmp/arch-mirrorlist
                fi
            } >/etc/pacman.d/mirrorlist
        else
            _pr_warn "Unable to fetch latest mirrorlist, skipping."
        fi

        # Always delete temporary file created even when function bailed out early
        rm -f /tmp/arch-mirrorlist
        ;;
    manjaro)
        _pr_info "Updating Manjaro Linux mirrorlist..."
        # Use official pacman-mirrors tool installed by default on Manjaro
        pacman-mirrors --fasttrack -q
        ;;
    esac

    # CachyOS, if repos are used on other Arch-based distros or when native method above fails
    if [[ -n $COS_UPDATE_LATER ]] || ( [[ $ID != cachyos ]] && _check_mirrorlist cachyos ); then
        _pr_info "Updating CachyOS mirrorlist${COS_UPDATE_LATER:+ (trying again)}..."
        curl -s https://raw.githubusercontent.com/CachyOS/CachyOS-PKGBUILDS/master/cachyos-mirrorlist/cachyos-mirrorlist |
             sed '/##/d' | _rank_mirrors cachyos - >/etc/pacman.d/cachyos-mirrorlist

        for LEVEL in 3 4; do
            if _check_mirrorlist cachyos-v$LEVEL; then
                sed "s/\$arch/\$arch_v$LEVEL/g" /etc/pacman.d/cachyos-mirrorlist \
                    >/etc/pacman.d/cachyos-v$LEVEL-mirrorlist
                _pr_info "Found and updated cachyos-v$LEVEL-mirrorlist."
            fi
        done
    fi

    # Chaotic-AUR - discard both geo-located and CDN mirrors
    if _check_mirrorlist chaotic; then
        _pr_info "Updating Chaotic-AUR mirrorlist..."
        curl -s https://aur.chaotic.cx/mirrorlist.txt |
            sed -e /geo-mirror/d -e /cdn-mirror/d -e '/# /d' |
            _filter_by_mirror_status https://cdn-mirror.chaotic.cx/no-failover/chaotic-aur - |
            _rank_mirrors chaotic-aur - >/etc/pacman.d/chaotic-mirrorlist
    fi

    # Arch Linux CN
    if _check_mirrorlist archlinuxcn; then
        _pr_info "Updating Arch Linux CN mirrorlist..."
        curl -s https://raw.githubusercontent.com/archlinuxcn/mirrorlist-repo/master/archlinuxcn-mirrorlist |
            sed -e 's/# Server/Server/g' -e /repo.archlinuxcn/d -e '/##/d' |
            _filter_by_mirror_status https://repo.archlinuxcn.org - |
            _rank_mirrors archlinuxcn - >/etc/pacman.d/archlinuxcn-mirrorlist
    fi

    _pr_info "Done."
}
alias updMirrorlist='_su_exec su -c ". $SCRIPT_DIR/env/global && $(declare -f _check_mirrorlist _filter_by_mirror_status _rank_mirrors get_distid updMirrorlist) && updMirrorlist"'
