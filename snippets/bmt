#!/usr/bin/env bash
# Bare-metal toolchain compilation snippets
# Copyright (C) 2019 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Location of working directory
BMT_DIR=${HOME}/build/bmt

# Build bare metal toolchain
function bmt_build {
    # Target ARCH we're going to build
    # Only supports ARM, AArch64 (ARM64), x86_64
    case ${1} in
        aarch64|x86_64) # ${1}-elf
            TARGET=${1}-elf ;;
        arm) # arm-eabi
            TARGET=arm-eabi ;;
        arm64) # AArch64 - aarch64-elf
            TARGET=aarch64-elf ;;
        *)
            pr_err "Unsupported ARCH specified!"
            return 1 ;;
    esac

    # Common configuration flags
    COMMON_FLAGS=( "CFLAGS=-g0 -O2 -fstack-protector-strong"
                   "CXXFLAGS=-g0 -O2 -fstack-protector-strong"
                   "--target=${TARGET}" "--prefix=${BMT_DIR}/${TARGET}"
                   "--disable-multilib" "--disable-werror" )

    # Save current PATH as OLD_PATH
    OLD_PATH=${PATH}

    # Set toolchain directory to PATH
    export PATH=${BMT_DIR}/${TARGET}/bin:${PATH}

    (
        cd "${BMT_DIR}" || { pr_err "Working directory doesn't exist!"; return 1; }

        # Re-create build folders
        pr_info "Cleaning working directory..."
        find . -maxdepth 1 -name build-'*' -exec rm -rf {} \;
        mkdir -p build-{binutils,gcc}

        # If target toolchain exists, remove it
        [[ -d ${TARGET} ]] && rm -rf ${TARGET}

        ( # Build Binutils
            cd build-binutils || { pr_err "Binutils build folder doesn't exist!"; return 1; }

            pr_info "Configuring Binutils..."
            ./../binutils/configure "${COMMON_FLAGS[@]}" \
                                    --disable-gdb \
                                    --enable-gold \
                || { pr_err "Error while configuring Binutils"; return 1; }

            pr_info "Building Binutils..."
            make -j"${THREADS}" || { pr_err "Error while building Binutils"; return 1; }

            pr_info "Installing Binutils..."
            make install -j"${THREADS}" || { pr_err "Error while installing Binutils"; return 1; }
        ) || return 1

        ( # Build GCC
            cd build-gcc || { pr_err "GCC build folder doesn't exist!"; return 1; }

            pr_info "Configuring GCC..."
            ./../gcc/configure "${COMMON_FLAGS[@]}" \
                               --enable-languages=c \
                               --without-headers \
                || { pr_err "Error while configuring GCC"; return 1; }

            pr_info "Building GCC..."
            make all-gcc -j"${THREADS}" || { pr_err "Error while building GCC"; return 1; }

            pr_info "Installing GCC..."
            make install-gcc -j"${THREADS}" || { pr_err "Error while installing GCC"; return 1; }

            pr_info "Building libgcc for target..."
            make all-target-libgcc -j"${THREADS}" || { pr_err "Error while building libgcc for target"; return 1; }

            pr_info "Installing libgcc for target..."
            make install-target-libgcc -j"${THREADS}" || { pr_err "Error while installing libgcc for target"; return 1; }
        ) || return 1
    ) || { export PATH=${OLD_PATH}; unset COMMON_FLAGS OLD_PATH; return 1; }

    pr_info "Successfully built toolchain with the following details:" \
            "Version     : $("${TARGET}"-gcc --version | head -1)" \
            "Install Path: $(command -v "${TARGET}"-gcc)"

    # Revert PATH back to its original state
    export PATH=${OLD_PATH}

    # Cleanup
    unset COMMON_FLAGS OLD_PATH
}
