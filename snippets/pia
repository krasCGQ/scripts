# shellcheck shell=bash
# Collection of Private Internet Access-related commands
# Copyright (C) 2019-2020 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Setup Private Internet Access configuration files for OpenVPN
piaOvpnSetup() {
    local AUTH_FILE CONFIG EXTRA_ARGS MODE PASS TMP_DIR USER
    # Temporary directory to fetch and manage configuration files
    TMP_DIR=/tmp/pia_openvpn
    # Path to auth-user-pass file
    AUTH_FILE=/etc/openvpn/pia-auth.conf
    # UDP by default
    MODE=udp

    # What to do if something fails, being interrupted or terminated
    trap '{
        [[ $(pwd) = $TMP_DIR ]] && cd - > /dev/null
        [[ -d $TMP_DIR ]] && rm -rf $TMP_DIR
        return 2> /dev/null
    }' ERR INT TERM

    # Make sure OpenVPN is installed
    [[ -z $(command -v openvpn) ]] && { prWarn "Please install openvpn package before continuing." && return 1; }

    # Parse parameters
    # Only one type at a time, latter function will override already assigned
    while [[ $# -ge 1 ]]; do
        case $1 in
        # AEAD
        -a | --aead)
            # For now only TCP
            [[ $MODE == tcp ]] && AEAD=true
            ;;

        # TCP
        -t | --tcp)
            MODE=tcp
            ;;

        # UDP
        -u | --udp)
            MODE=udp
            ;;

        # Unrecognized parameter, skip
        *)
            prWarn "Unrecognized parameter specified: \"${1}\""
            ;;
        esac
        shift
    done

    # Create temporary directory and enter it
    mkdir -p $TMP_DIR
    cd $TMP_DIR || return 1

    # Fetch recommended configuration files
    prInfo "Fetching configuration files..."
    [[ $MODE == tcp ]] && EXTRA_ARGS+=-tcp
    if [[ -n $AEAD ]]; then
        EXTRA_ARGS+=-aead
        # This is hosted on my VPS since PIA doesn't provide it by default
        curl -sO https://kudnet.id/downloads/.files/openvpn$EXTRA_ARGS.zip
    else
        curl -sO https://www.privateinternetaccess.com/openvpn/openvpn$EXTRA_ARGS.zip
    fi

    # Extract configuration files and remove the archive
    prInfo "Extracting configuration files..."
    unzip -q openvpn$EXTRA_ARGS.zip
    rm -f openvpn$EXTRA_ARGS.zip

    # sed configuration files to include auth-user-pass file path
    prInfo "Patching configuration files..."
    for CONFIG in ./*.ovpn; do
        # Single quote doesn't expand things
        sed -i 's|auth-user-pass|auth-user-pass /etc/openvpn/pia-auth.conf|' "$CONFIG"
    done

    # Remove existing configuration files if any
    prInfo "Removing existing configuration files..."
    chkSudo rm -rf /etc/openvpn/client/*

    # Move everything to /etc/openvpn/client and set correct permissions
    prInfo "Moving configuration files to /etc/openvpn..."
    chkSudo su -c "mv -f ./* /etc/openvpn/client && chown -R root:network /etc/openvpn/client"

    # Go back to previous directory and remove temporary directory
    cd - >/dev/null || return 1
    rm -rf $TMP_DIR

    if [[ ! -f $AUTH_FILE ]]; then
        # Prompt user to enter Private Internet Access credientials
        echo -n "- Please enter your PIA username: "
        read -r USER
        echo -n "- Please enter your PIA password: "
        read -r PASS

        # Save them to /etc/openvpn/pia-auth.conf and set correct permissions
        prInfo "Saving credientials to $AUTH_FILE..."
        echo -e "$USER\n$PASS" | chkSudo tee $AUTH_FILE >/dev/null
        chkSudo su -c "chown root:network $AUTH_FILE && chmod 600 $AUTH_FILE"
    fi

    # And... it's done.
    prInfo "The operation completed successfully."
}

# Wrapper to connect to Private Internet Access with OpenVPN
# TODO: Country shortcode
_piaOvpnConnect() {
    [[ $(whoami) != root ]] && return 1
    local CONFIG PORT PROTOCOL

    # Make sure OpenVPN is installed
    if [[ -z $(command -v openvpn) ]]; then
        prWarn "Please install openvpn package before continuing."
        return 1
    # Warn for specification of more than a country
    elif [[ $# -gt 1 ]]; then
        prWarn "This function uses one parameter only."
    # Exit function if no country is specified
    elif [[ $# -lt 1 ]]; then
        prWarn "Please specify a country to connect."
        return 1
    fi

    # Replace underscore with space
    COUNTRY="${1/_/ }"
    # OpenVPN config file
    CONFIG=/etc/openvpn/client/"$COUNTRY".ovpn
    # Exit function immediately if provided country doesn't exist
    if [[ ! -f $CONFIG ]]; then
        prWarn "Invalid country provided: $COUNTRY"
        return 1
    fi

    # Passed to killswitch's 2nd argument to bypass rules
    SERVER=$(grep 'remote ' "$CONFIG" | cut -d ' ' -f 2)
    PORT=$(grep 'remote ' "$CONFIG" | cut -d ' ' -f 3)
    PROTOCOL=$(grep proto "$CONFIG" | cut -d ' ' -f 2)

    # If .ip-address.saved is exist, probably it wasn't disconnected properly
    if [[ -f $SCRIPT_DIR/.ip-address.saved ]]; then
        prWarn "Redundant rules detected! Disabling VPN kill switch..."
        "$SCRIPT_DIR"/utils/killswitch.bash off "$SERVER" "$PORT/$PROTOCOL" >/dev/null
    fi

    # Use PIA DNS servers in resolv.conf
    echo -e "nameserver 209.222.18.222\nnameserver 209.222.18.218" >/etc/resolv.conf

    # Make resolv.conf read-only
    chattr +i /etc/resolv.conf

    # Enable VPN kill switch
    prInfo "Enabling VPN kill switch..."
    "$SCRIPT_DIR"/utils/killswitch.bash on "$SERVER" "$PORT/$PROTOCOL" >/dev/null

    # Restart name server cache daemon
    # TODO: For other distros?
    nscd -K && nscd

    # Let's put some common senses before starting VPN, as OpenVPN always
    # returns 0 exit status regardless of any error during connection
    # 1. Immediately quit upon encountering error, don't proceed further
    trap 'return 1' ERR
    # 2. Stop, then proceed with disabling VPN kill switch
    trap 'break' INT

    # Connect with supplied country name in the background
    prInfo "Establishing connection to $COUNTRY..."
    while true; do
        openvpn --config "$CONFIG" --auth-nocache --keepalive 60 720 --remap-usr1 SIGTERM
        prWarn "Reconnecting to $COUNTRY..."
    done

    # Upon disconnection, warn it
    prWarn "Connection has been terminated."

    # Disable VPN kill switch
    prInfo "Disabling VPN kill switch..."
    "$SCRIPT_DIR"/utils/killswitch.bash off "$SERVER" "$PORT/$PROTOCOL" >/dev/null

    # Make resolv.conf read/write
    chattr -i /etc/resolv.conf
}
piaOvpnConnect() { chkSudo --preserve-env=SCRIPT_DIR su -c ". $SCRIPT_DIR/env/global && $(declare -f _piaOvpnConnect) && _piaOvpnConnect $*"; }

# Get latest Private Internet Access client installer
# Currently doesn't verify against checksum provided
piaGetInstaller() {
    local BASE_URL NAME OS PASS URL
    BASE_URL=https://www.privateinternetaccess.com/installer/x/download_installer_
    # Make it not case-sensitive by lowercasing everything
    OS=$(echo "$1" | tr '[:upper:]' '[:lower:]')

    # Take only first argument for OS version
    # Android version downloaded this way has MACE, Play Store doesn't
    # iOS/iPad version must be downloaded from App Store
    for i in android linux osx win32 win64; do
        [[ $OS == "$i" ]] && { PASS=true && break; }
    done
    [[ -z $PASS ]] && { prWarn "Invalid OS selected!" && return 1; }
    unset PASS

    # PIA uses different structure for Windows installers
    [[ $OS =~ win ]] && OS=${OS/n/n\/}
    # PIA uses different base URL for Android APK
    [[ $OS == android ]] && BASE_URL=${BASE_URL/\/x/}
    # Get installer URL
    prInfo "Fetching download URL..."
    URL=$(curl -s $BASE_URL"$OS" | grep refresh | cut -d'=' -f4 | sed -e 's/">//')
    [[ -z $URL ]] && { prWarn "Unable to retrieve download URL." && return 1; }

    # Download installer using Axel
    NAME=$(basename "$URL")
    prInfo "Downloading $NAME..."
    axel -n16 -o "$HOME"/Downloads/"$NAME" "$URL"
}
