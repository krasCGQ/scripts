#!/usr/bin/env bash
# shellcheck disable=SC1090
# Copyright (C) 2017-2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# Import common bash completion
. "${HOME}"/scripts/env_common.comp

# Use Central Indonesia Time
export TZ=Asia/Makassar

# Export GOPATH early for checking
export GOPATH=${HOME}/go

# Other variables used around this script
CTNGCOMP=${HOME}/src/ct-ng/bash-completion/ct-ng
TRANSFERSH=${HOME}/scripts/transfer.sh

# If 'hostname' returns botstack, set up caddy & http-server aliases
if [[ $(hostname) == botstack ]]; then
    alias caddy='caddy -quic -quiet -conf ${HOME}/Caddyfile &'
    alias http-server='http-server -a 0.0.0.0 -p 9001 >> /dev/null &'
fi

# If GOPATH doesn't exist, unset it
[[ ! -d ${GOPATH} ]] && \
    unset GOPATH

# Export local binary paths
export PATH=${HOME}/.local/bin:${PATH}
[[ -d ${GOPATH} ]] && \
    export PATH=${GOPATH}/bin:${PATH}

# crosstool-ng
[[ -f ${CTNGCOMP} ]] && \
    . "${CTNGCOMP}"

# transfer.sh
[[ -f ${TRANSFERSH} ]] && \
    . "${TRANSFERSH}"

# Shortcut for ssh-agent setup
function ssh_setup {
    # Do an unconditional check
    [[ ! -f ${HOME}/.ssh/id_ed25519 ]] && \
        echo "! Please generate an SSH key before using this command." && \
        return 1

    # The actual setup is here
    eval "$(ssh-agent -s)"
    ssh-add "${HOME}"/.ssh/id_ed25519
}

# Sign ROM zip before release
# Reference and why: https://source.android.com/devices/tech/ota/sign_builds
function rom_sign {
    # Must be run at root of ROM source
    [[ ! -d $(pwd)/build/tools ]] && \
        echo "! This function must be run at root of ROM source!" && \
        return 1

    # Make sure only one target files package exists prior to running the function
    [[ $(find "$(pwd)/out/dist" -name "*target_files*" | wc -l) -ne 1 ]] && \
        echo "! Less or more than one target files package detected!" && \
        return 1

    # Must have signing keys in .android-certs at root of home folder before proceeding
    for SIGNKEYS in {media,platform,releasekey,shared}.{pk8,x509.pem}; do
        [[ ! -f ${HOME}/.android-certs/${SIGNKEYS} ]] && \
            echo "! Missing one or more signing keys in ${HOME}/.android-certs folder!" && \
            break && \
            return 1
    done

    # Sign target files package
    ./build/tools/releasetools/sign_target_files_apks \
        -o -d "${HOME}"/.android-certs \
        out/dist/*-target_files-*.zip \
        signed-target_files.zip \
        || return 1

    # Convert signed target files package to signed OTA package
    ./build/tools/releasetools/ota_from_target_files \
        --block --backup=true \
        -k "${HOME}"/.android-certs/releasekey \
        signed-target_files.zip \
        signed-ota_update.zip \
        || return 1

    # Cleanup
    rm -f signed-target_files.zip
    rm -rf out/dist/*
}

# Date checking for GMP daily snapshot download
function check_gmp_date {
    [[ $(TZ=Europe/Berlin date +%Z) == CEST ]] && \
        GAP=15600 || \
        GAP=19200

    date --date=@$(($(date +%s) - GAP)) -u +%Y%m%d
}

# A wrapper to automate crosstool-NG toolchain build
function ct-ng_build {
    TARDIR=${CTDIR}/tarballs
    GITDIR=${CTDIR}/git
    ISLDIR=${GITDIR}/isl
    ISLPATCH=${HOME}/patches/isl/0001-isl--Revert-all-troublesome-changes.patch

    [[ -z $(command -v ct-ng) ]] && \
        echo "! ${BLD}ct-ng${RST} isn't installed." && \
        echo "  Please build or install crosstool-NG package before continuing." && \
        return 1

    [[ -z ${CTDIR} ]] && \
        echo "! ${BLD}CTDIR${RST} variable is empty. Refusing to continue." && \
        return 1

    (
        ! cd "${CTDIR}" 2> /dev/null && \
            echo "! $(basename "${CTDIR}") doesn't exist in defined path." && \
            return 1

        echo "- Cleaning up work directory..."
        ! ct-ng clean > /dev/null && \
            echo "! Failed to clean up work directory." && \
            return 1

        (
            ! cd "${TARDIR}" 2> /dev/null && \
                echo "! $(basename "${CTDIR}")/$(basename "${TARDIR}") doesn't exist in defined path." && \
                return 1

            [[ ! -f "gmp-6.1.99-$(check_gmp_date).tar.lz" ]] && \
                echo "- Downloading gmp-6.1.99-$(check_gmp_date).tar.lz..." && \
                wget -q https://gmplib.org/download/snapshot/"gmp-6.1.99-$(check_gmp_date).tar.lz"
        )
        (
            ! cd "${GITDIR}" 2> /dev/null && \
                echo "! $(basename "${CTDIR}")/$(basename "${GITDIR}") doesn't exist in defined path." && \
                return 1

            echo "- Updating git projects..."
            ./update || \
                return 1
        )
        (
            ! cd "${ISLDIR}" 2> /dev/null && \
                echo "! $(basename "${CTDIR}")/$(basename "${GITDIR}")/$(basename "${ISLDIR}") doesn't exist in defined path." && \
                return 1

            [[ ! -d .git ]] && \
                echo "! $(basename "${CTDIR}")/$(basename "${GITDIR}")/$(basename "${ISLDIR}") isn't a git project." && \
                echo "  Are you sure the defined path is correct?" && \
                return 1

            echo "- Updating and patching ISL for toolchain building..."
            exec 5>&1 6>&2 &> /dev/null
            git fetch origin master
            git reset --hard origin/master
            git clean -dfx
            exec 1>&5 2>&6 1> /dev/stdout 2> /dev/stderr
            ! patch --merge -s -N -p1 -i "${ISLPATCH}" && \
                echo "! Failed to patch ISL. Refusing to continue." && \
                return 1

            echo "- Generating configuration files..."
            ! ./autogen.sh && \
                echo "! Failed to generate configuration files." && \
                return 1
        )

        ! ct-ng source && \
            echo "! Failed to obtain required sources." && \
            return 1

        if ct-ng build; then
            echo
            echo "- Successfully built the toolchain."
        else
            echo "! Failed to build the toolchain."
            return 1
        fi
    )
}

# Last, but my most convenient part
# shellcheck disable=SC1117
export PS1="\[\e[1;32m\]\u@\h\[\e[1;37m\] \W\[\e[1;33m\]\`parse_git_branch\`\[\e[1;32m\] \$\[\e[0m\] "
