#!/usr/bin/env bash
# shellcheck disable=SC1004
# KudProject kernel build script
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

## Import common environment script
# shellcheck source=/dev/null
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/env/common

## Functions

# telegram.sh message posting wrapper to avoid use of 'echo -e' and '\n'
function tg_post {
    "${TELEGRAM}" "$(for POST in "${@}"; do echo "${POST}"; done)" \
        &> /dev/null || return 0
}

# In case of signal interrupt, post interruption notification and exit script
trap '{
    [[ -n ${STARTED} ]] && \
        tg_post "${MSG} Interrupted - Signal Interrupt" \
                "Request from @TheOhara was granted."

    exit 130
}' INT

# For any errors, no matter what, post error notification and exit script
function tg_error {
    tg_post "${MSG} Interrupted - Build Error(s)" \
            "@TheOhara, do something, quick!"

    exit "${STATUS}"
}

# Prints message to stderr and exit script, OR call tg_error function
function die {
    [[ -z ${STATUS} && -n ${STARTED} ]] && \
        STATUS=${?}

    warn "${1}"

    if [[ -n ${STARTED} ]]; then
        tg_error
    else
        exit 1
    fi
}

# Whenever script fails, save exit status and run tg_error
trap '{
    [[ -n ${STARTED} ]] && \
        STATUS=${?}

    tg_error
}' ERR

# git log --pretty alias
function git_pretty {
    git log --pretty=format:"%h (\"%s\")" -1
}

## Parse parameters

if [[ ${#} -ge 1 ]]; then
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # REQUIRED
            -c |--compiler)
                shift

                # Only Clang or GCC is supported, case insensitive
                if [[ ${1,,} == clang || ${1,,} == gcc ]]; then
                    COMPILER=${1,,}
                else
                    die "Invalid value specified!"
                fi ;;
            -d |--device)
                shift

                # Only mido and X00T are supported for now
                if [[ ${1,,} == mido ]]; then
                    DEVICE=${1,,}
                elif [[ ${1^^} == X00T ]]; then
                    DEVICE=${1^^}
                else
                    die "Invalid value specified!"
                fi ;;

            # OPTIONAL
            -b |--build-only)
                BUILD_ONLY=true ;;
            -cv|--clang-version)
                shift

                # Only latest versions of Clang 5-8 are supported
                if [[ ${1} -eq 5 ]]; then
                    CLANG_VERSION=4053586
                elif [[ ${1} -eq 6 ]]; then
                    CLANG_VERSION=4691093
                elif [[ ${1} -eq 7 ]]; then
                    CLANG_VERSION=r328903
                elif [[ ${1} -eq 8 ]]; then
                    CLANG_VERSION=r344140b
                else
                    die "Invalid version specified!"
                fi ;;
            -r |--release)
                shift

                # Only integers are accepted here
                if [[ -z ${1//[0-9]} ]]; then
                    RELEASE=${1}
                else
                    die "Invalid version specified!"
                fi ;;
            -s |--stock)
                STOCK=true ;;
            -u |--upload)
                # Will be ignored if BUILD_ONLY=true
                UPLOAD=true ;;

            # Unsupported parameter
            *)
                warn "Unrecognized parameter specified: \"${1}\"" ;;
        esac
        shift
    done
else
    die "No parameter specified!"
fi

## Variables

# Paths
TELEGRAM="${SCRIPTDIR}"/telegram/telegram
ROOT_DIR=${HOME}/KudProject
OPT_DIR=/opt/kud

# Number of threads used
THREADS=$(nproc --all)

# GCC and Clang (if used) compilers
if [[ -z ${STOCK} ]]; then
    GCC_COMPILER=aarch64-linux-gnu/bin/aarch64-linux-gnu-
    GCC32_COMPILER=arm-linux-gnueabi/bin/arm-linux-gnueabi-
    [[ ${COMPILER} == clang ]] && \
        CLANG_COMPILER=clang-8.x
else
    GCC_COMPILER=aarch64-linux-android-4.9/bin/aarch64-linux-androidkernel-
    GCC32_COMPILER=arm-linux-androideabi-4.9/bin/arm-linux-androideabi-
    [[ ${COMPILER} == clang ]] && \
        CLANG_COMPILER=android-clang/clang-${CLANG_VERSION}
fi

# Set prefixes here
GCC_PREFIX=${OPT_DIR}/${GCC_COMPILER}
GCC32_PREFIX=${OPT_DIR}/${GCC32_COMPILER}
[[ ${COMPILER} == clang ]] && \
    CLANG_PATH=${OPT_DIR}/${CLANG_COMPILER}/bin/clang

# Kernel build variables
AK2=${ROOT_DIR}/AnyKernel2/${DEVICE}
ARCH=arm64
NAME=KudKernel
OUT=${ROOT_DIR}/kernels/build/${DEVICE}
[[ -n ${RELEASE} ]] && \
    export KBUILD_BUILD_VERSION=${RELEASE}

if [[ ${DEVICE} == mido ]]; then
    # mido build ships both treble and non-treble DTBs
    DTB=msm8953-qrd-sku3-${DEVICE}
elif [[ ${DEVICE} == X00T ]]; then
    # X00T: Also send test build zip to open testing group
    OPEN_TESTING=-1001334393755
fi

# Default message for posting to Telegram
MSG="${NAME} (${DEVICE}) build:"

## Commands

# Run this inside kernel source
[[ ! -f Makefile || ! -d kernel ]] && \
    die "Please run this script inside kernel source folder!"

# Unset these variables if they're set
for VARIABLE in CROSS_COMPILE{,_ARM32} CC; do
    [[ -n ${VARIABLE} ]] && \
        unset ${VARIABLE}
done

# Sanity checks
info "Running sanity checks..."
sleep 1

[[ -z ${COMPILER} || -z ${DEVICE} ]] && \
    die "Missing required option(s)!"

[[ -n ${UPLOAD} && -n ${BUILD_ONLY} ]] && \
    { warn "Requested to only build but upload was assigned, disabling.";
      unset UPLOAD; }

[[ -n ${CLANG_VERSION} && -z ${STOCK} ]] && \
    { warn "Assigning Clang version is only meant for AOSP Clang, disabling.";
      unset CLANG_VERSION; }

for VARIABLE in ${GCC_PREFIX}gcc ${GCC32_PREFIX}gcc ${CLANG_PATH}; do
    find ${VARIABLE} &> /dev/null || \
        die "${BLD}$(basename "${VARIABLE}")${RST} doesn't exist in defined path."
done

[[ ! -d ${AK2} ]] && \
    die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

# Begin script
tg_post "${MSG} Started!"
info "Starting build script..."
sleep 1

# Explicitly declare build script startup
STARTED=true

# Set globstar so '**' is recursive
shopt -s globstar

# Always use ccache for faster compiling if exists in PATH
if [[ -n $(command -v ccache) ]]; then
    if [[ ${COMPILER} == clang ]]; then
        CC+="ccache "
    else
        CROSS_COMPILE+="ccache "
        CROSS_COMPILE_ARM32+="ccache "
    fi
fi

# Append (or set) CROSS_COMPILE{,_ARM32}
CROSS_COMPILE+=${GCC_PREFIX}
CROSS_COMPILE_ARM32+=${GCC32_PREFIX}

# If Clang is used
if [[ ${COMPILER} == clang ]]; then
    # Additionally also append (or set) CC
    CC+=${CLANG_PATH}

    # Define additional parameters that'll be passed to make
    CLANG_EXTRAS=( "CC=${CC}"
                   "CLANG_TRIPLE=aarch64-linux-gnu"
                   "CLANG_TRIPLE_ARM32=arm-linux-gnueabi" )

    # Export custom compiler string
    KBUILD_COMPILER_STRING=$("${CLANG_PATH}" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
    export KBUILD_COMPILER_STRING
fi

# Clean build directory
info "Cleaning build directory..."
# TODO: Completely clean build?
make ARCH=${ARCH} O="${OUT}" clean &> /dev/null

# TODO: Generate defconfig if it doesn't exist

# Let's build the kernel!
info "Building kernel..."
make ARCH=${ARCH} O="${OUT}" CROSS_COMPILE="${CROSS_COMPILE}" \
     CROSS_COMPILE_ARM32="${CROSS_COMPILE_ARM32}" "${CLANG_EXTRAS[@]}" \
     -j"${THREADS}" > /dev/null

if [[ -z ${BUILD_ONLY} ]]; then
    # Clean and copy kernel image and DTBs (mido only) to AnyKernel2 folder
    info "Cleaning and copying required file(s) to AnyKernel2 folder..."
    if [[ ${DEVICE} == mido ]]; then
        rm -rf "${AK2}"/{kernel,{,non}treble}/*
        cp -f "${OUT}"/arch/arm64/boot/Image.gz "${AK2}"/kernel
        for VARIANT in {,non}treble; do
            cp -f "${OUT}"/arch/arm64/boot/dts/qcom/"${DTB}"-${VARIANT}.dtb "${AK2}"/${VARIANT}/"${DTB}".dtb
        done
    elif [[ ${DEVICE} == X00T ]]; then
        rm -f "${AK2}"/{Image.gz-dtb,modules/vendor/lib/modules/*.ko}
        cp -f "${OUT}"/arch/arm64/boot/Image.gz-dtb "${AK2}"
        for MODULE in "${OUT}"/**/*.ko; do
            cp -f "${MODULE}" "${AK2}"/modules/vendor/lib/modules
        done
    fi

    # Export here to be picked later
    ZIP=${NAME}-${DEVICE}-$(date +%s).zip
    [[ -n ${RELEASE} ]] && \
        RELEASE_ZIP=${NAME}-${DEVICE}-r${RELEASE}-$(date +%Y%m%d).zip

    # Make flashable kernel zip
    info "Creating ${ZIP}..."
    (
        cd "${AK2}" || \
            die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

        zip -qr9 "${ZIP}" ./* -x README.md -x ./*.zip

        if [[ -n ${RELEASE} ]]; then
            # Remove existing release zip if available
            [[ -f ${RELEASE_ZIP} ]] && \
                rm -f "${RELEASE_ZIP}"

            # Sign zip for release
            zipsigner "${ZIP}" "${RELEASE_ZIP}"

            # Delete 'unsigned' zip
            rm -f "${ZIP}"
        fi
    )
fi

# Notify successful build completion
tg_post "${MSG} Completed!"

# Upload kernel zip if requested, else the end
if [[ -n ${UPLOAD} ]]; then
    if [[ -z ${RELEASE} ]]; then
        # To Telegram
        info "Uploading ${ZIP} to Telegram..."
        tg_post "Uploading build to testing group..."
        "${TELEGRAM}" -f "${AK2}/${ZIP}" -c "$(get_chatid rg_unified)" \
            $([[ ${DEVICE} == X00T ]] && echo "-c" "${OPEN_TESTING}") \
            "New test build available with latest commit: $(git_pretty)" || \
            { warn "Failed to upload ${ZIP}.";
              tg_post "Failed to upload the build." \
                      "@TheOhara, I need your intervention please."; }
    else
        # or to webserver for release zip
        (
            cd "${AK2}" || \
                die "$(basename "${AK2}") doesn't exist in defined path."

            info "Uploading ${RELEASE_ZIP} to webserver..."
            if rsync -qP --relative "${RELEASE_ZIP}" kud@sophie.wafuu.id:/var/www/dl.wafuu.id/kernels/"${DEVICE}"/; then
                info "${RELEASE_ZIP} uploaded successfully." \
                     "GitHub releases and AndroidFileHost uploads need manual intervention, though."
            else
                warn "Failed to upload ${RELEASE_ZIP}."
            fi
        )
    fi
fi

# Notify latest commit and end script
tg_post "Latest commit: $(git_pretty)"
info "That's it. Job well done!"

# Unset globstar
shopt -u globstar

# Alert for script ending
echo -ne '\a'
