#!/usr/bin/env bash
# shellcheck disable=SC1004
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# TODO: Proper build script, this is made solely for mido kernel build for now

## Import common environment script
# shellcheck source=/dev/null
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/env/common

## Variables

function set_variables {
    # Source of telegram.sh
    TELEGRAM="${SCRIPTDIR}"/telegram/telegram

    # Number of threads used
    THREADS=$(nproc --all)

    # GCC and Clang (if used)
    GCCPREFIX=/opt/kud/aarch64-linux-gnu/bin/aarch64-linux-gnu-
    [[ ${COMPILER} == clang ]] && \
        CLANGPATH=/opt/kud/flash-clang-8.x/bin/clang

    # Device variable
    DEVICE=mido

    # Kernel build variables
    AK2=${HOME}/KudProject/AnyKernel2-${DEVICE}
    ARCH=arm64
    DTB=msm8953-qrd-sku3-${DEVICE}
    NAME=KudKernel-${DEVICE}
    OUT=$(pwd)/../build/${DEVICE}
    [[ -n ${RELEASE} ]] && \
        export KBUILD_BUILD_VERSION=${RELEASE}

    # Default message for posting to Telegram
    MSG="${NAME/-*} build:"
}

## Functions

# telegram.sh message posting wrapper to avoid use of 'echo -e' and '\n'
function tg_post {
    "${TELEGRAM}" "$(for POST in "${@}"; do echo "${POST}"; done)"
}

# In case of signal interrupt, post interruption notification and exit script
trap '{
    [[ -n ${STARTED} ]] && \
        tg_post "${MSG} Interrupted - Signal Interrupt" \
                "@krasCGQ Y u do dis ?? >_<"

    exit 130
}' INT

# For any errors, no matter what, post error notification and exit script
function tg_error {
    tg_post "${MSG} Interrupted - Build Error(s)" \
            "@krasCGQ check console desu !! >_<"

    exit "${STATUS}"
}

# Prints message to stderr and exit script, OR call tg_error function
function die {
    [[ -z ${STATUS} && -n ${STARTED} ]] && \
        STATUS=${?}

    warn "${1}"

    if [[ -n ${STARTED} ]]; then
        tg_error
    else
        exit 1
    fi
}

# Whenever script fails, save exit status and run tg_error
trap '{
    [[ -n ${STARTED} ]] && \
        STATUS=${?}

    tg_error
}' ERR

# git log --pretty=format: wrapper
function git_pretty {
    git log --pretty=format:"${1}" -1
}

## Commands

# Parse parameters
if [[ ${#} -ge 1 ]]; then
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # REQUIRED
            -c|--compiler)
                shift

                # Only Clang or GCC is supported, case insensitive
                if [[ ${1,,} == clang || ${1,,} == gcc ]]; then
                    COMPILER=${1,,}
                else
                    die "Invalid parameter specified!"
                fi ;;

            # OPTIONAL
            -b|--build-only)
                BUILD_ONLY=true ;;
            -r|--release)
                shift

                # Only integers are accepted here
                if [[ -z ${1//[0-9]} ]]; then
                    RELEASE=${1}
                else
                    die "Invalid version specified!"
                fi ;;
            -u|--upload)
                # Will be ignored if BUILD_ONLY=true
                UPLOAD=true ;;

            # DIE!
            *)
                die "Invalid option(s) specified!" ;;
        esac

        shift
    done
else
    die "No option specified!"
fi

# Set all required variables
set_variables

# Run this inside kernel source
[[ ! -f Makefile || ! -d kernel ]] && \
    die "Please run this script inside kernel source folder!"

# Unset these variables if they're set
for VAR in CROSS_COMPILE CC; do
    [[ -n ${VAR} ]] && \
        unset ${VAR}
done

# Sanity checks
info "Running sanity checks..."
sleep 1

[[ -z ${COMPILER} ]] && \
    die "Missing required option!"

[[ -n ${UPLOAD} && -n ${BUILD_ONLY} ]] && \
    warn "Requested to only build but upload was assigned, disabling." && \
    unset UPLOAD

for VAR in ${GCCPREFIX}gcc ${CLANGPATH}; do
    find ${VAR} > /dev/null 2>&1 || \
        die "${BLD}$(basename "${VAR}")${RST} doesn't exist in defined path."
done

[[ ! -d ${AK2} ]] && \
    die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

# Begin script
tg_post "${MSG} Started!"
info "Starting build script..."
sleep 1

# Explicitly declare build script startup
STARTED=true

# Always use ccache for faster compiling if exists in PATH
if [[ -n $(command -v ccache) ]]; then
    [[ ${COMPILER} == clang ]] && \
        CC+="ccache " || \
        CROSS_COMPILE+="ccache "
fi

# Append (or set) CROSS_COMPILE
CROSS_COMPILE+=${GCCPREFIX}

# If Clang is used
if [[ ${COMPILER} == clang ]]; then
    # Additionally also append (or set) CC
    CC+=${CLANGPATH}

    # FIXME: Needs to be overridden by itself inside arrays
    CC=( "CC=${CC}" )

    # Export custom compiler string
    KBUILD_COMPILER_STRING=$("${CLANGPATH}" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
    export KBUILD_COMPILER_STRING
fi

# Clean build directory
info "Cleaning build directory..."
# TODO: Completely clean build?
make ARCH=${ARCH} O="${OUT}" clean > /dev/null

# TODO: Generate defconfig if it doesn't exist

# Let's build the kernel!
info "Building kernel..."
# FIXME: ${CC[@]} due to use of arrays; needed to make this work
make ARCH=${ARCH} O="${OUT}" "${CC[@]}" \
     CROSS_COMPILE="${CROSS_COMPILE}" -j"${THREADS}" > /dev/null

if [[ -z ${BUILD_ONLY} ]]; then
    # Clean AnyKernel2 directory
    info "Cleaning up AnyKernel2 folder..."
    rm -rf "${AK2}"/{kernel,{,non}treble}/*

    # Copy kernel image and DTB
    info "Copying kernel image and DTBs to AnyKernel2 folder..."
    cp -f "${OUT}"/arch/arm64/boot/Image.gz "${AK2}"/kernel/
    for VAR in {,non}treble; do
        cp -f "${OUT}"/arch/arm64/boot/dts/qcom/${DTB}-${VAR}.dtb "${AK2}"/${VAR}/${DTB}.dtb
    done

    # Export here to be picked later
    ZIP=${NAME}-$(date +%s).zip
    [[ -n ${RELEASE} ]] && \
        REL_ZIP=${NAME}-r${RELEASE}-$(date +%Y%m%d).zip

    # Make flashable kernel zip
    info "Creating ${ZIP}..."
    (
        cd "${AK2}" || \
            die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

        zip -qr9 "${ZIP}" ./* -x README.md -x ./*.zip

        if [[ -n ${RELEASE} ]]; then
            # Remove existing release zip if available
            [[ -f ${REL_ZIP} ]] && \
                rm -f "${REL_ZIP}"{,.md5sum}

            # Sign zip for release
            zipsigner "${ZIP}" "${REL_ZIP}"

            # Delete 'unsigned' zip
            rm -f "${ZIP}"
        fi
    )
fi

# Upload kernel zip if requested, else the end
if [[ -n ${UPLOAD} ]]; then
    if [[ -z ${RELEASE} ]]; then
        # To Telegram
        info "Uploading ${ZIP} to Telegram..."
        tg_post "${MSG} Completed!" \
                "Uploading build..."
        ! "${TELEGRAM}" -f "${AK2}/${ZIP}" && \
             warn "Failed to upload ${ZIP}." && \
             tg_post "Failed to upload the build." \
                     "@krasCGQ can u do it for me ?? >_<"
        tg_post "Latest commit: $(git_pretty "%h (\"%s\")")"
    else
        # or to webserver for release zip
        (
            cd "${AK2}" || \
                die "$(basename "${AK2}") doesn't exist in defined path."

            info "Creating md5sum of ${REL_ZIP}..."
            md5sum "${REL_ZIP}" > "${REL_ZIP}".md5sum

            info "Uploading ${REL_ZIP} to webserver..."
            tg_post "${MSG} Completed!"
            for FILES in "${REL_ZIP}"{,.md5sum}; do
                if rsync -qP "${FILES}" krasCGQ@srv1.botstack.host:~/srv/kernels/${DEVICE}; then
                    SUCCESS=true
                else
                    warn "Failed to upload ${FILES}."
                    [[ -n ${SUCCESS} ]] && \
                        unset SUCCESS
                    break
                fi
            done
        )

        [[ -n ${SUCCESS} ]] && \
            info "${REL_ZIP} uploaded successfully." \
                 "GitHub releases and AndroidFileHost uploads need manual intervention, though."
    fi
else
    tg_post "${MSG} Completed!" \
            "Latest commit: $(git_pretty "%h (\"%s\")")"
fi

# End script
info "That's it. Job well done!"

# Alert for script ending
echo -ne '\a'
