#!/usr/bin/env bash
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# TODO: Proper build script, this is made solely for mido kernel build for now

# Text styles
BLD=$(tput bold)
RST=$(tput sgr0)

# Run this inside kernel source
if [[ ! -f Makefile ]] || [[ ! -d kernel ]]; then
    echo " ${BLD}! Please run this script inside kernel source folder.${RST}"
    exit 1
fi

# Import Telegram bot token & chat ID
SCRIPTDIR=${HOME}/KudProject/scripts
TOKEN=$(cat ${SCRIPTDIR}/tg_token)
CHATID=$(cat ${SCRIPTDIR}/tg_chatid | head -n 1 -c 14)

# Default message
MSG="KudKernel build:"

# Report progress to a Telegram chat
function tg_sendinfo() {
    curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
         -d text="${1}" \
         -d chat_id=${CHATID} >> /dev/null
}

# For signal interrupt (from keyboard)
trap '{
    tg_sendinfo "$(echo -e "${MSG} Interrupted - Signal Interrupt\n@krasCGQ Y u do dis ?? >_<")"
    exit 130
}' INT

# For any error
function tg_senderror() {
    tg_sendinfo "$(echo -e "${MSG} Interrupted - Build Error(s)\n@krasCGQ check console desu !! >_<")"
    [[ ! -z ${STATUS} ]] && \
        exit ${STATUS} || \
        exit 1
}

# For any non-zero exit status
trap '{
    STATUS=${?}
    tg_senderror
}' ERR

# Begin script
tg_sendinfo "${MSG} Started!"
echo " - Setting up environment variables..."
sleep 1

# Unset these variables if they're set
for VAR in CROSS_COMPILE GCCPREFIX CLANGPATH; do
    [[ ! -z ${VAR} ]] && \
        unset ${VAR}
done

# Set these variables early for cross-compilers checking
GCCPREFIX=/opt/kud/aarch64-linux-gnu/bin/aarch64-linux-gnu-
CLANGPATH=/opt/kud/flash-clang-7.x/bin/clang

# Whenever you're high enough to run this script
for VAR in ${GCCPREFIX}gcc ${CLANGPATH}; do
    if ! find ${VAR} > /dev/null 2>&1; then
        echo "${BLD}! $(basename ${VAR}) doesn't exist in the defined path."
        tg_senderror
    fi
done

# Use ccache for faster compiling
[[ $(which ccache > /dev/null 2>&1; echo $?) -eq 0 ]] && \
    CC+="ccache "

# Now that we passed the check
CROSS_COMPILE=${GCCPREFIX}
CC+=${CLANGPATH}

# Variables
AK2=../../../AnyKernel2
ARCH=arm64
CLANG_TRIPLE=aarch64-linux-gnu-
DTB=msm8953-qrd-sku3-mido
OUT=../build/mido
THREADS=$(nproc --all)

## Export custom compiler string
export KBUILD_COMPILER_STRING=$(${CC} --version | head -n 1 | perl -pe 's/\(git.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')

# Clean build directory
echo " - Cleaning build directory..."
# TODO: Completely clean build?
make ARCH=${ARCH} O=${OUT} clean > /dev/null

# Let's build the kernel!
echo " - Building kernel..."
make ARCH=${ARCH} O=${OUT} CC="${CC}" CLANG_TRIPLE=${CLANG_TRIPLE} \
     CROSS_COMPILE=${CROSS_COMPILE} -j${THREADS} > /dev/null

# Clean AnyKernel2 directory
echo " - Cleaning up AnyKernel2 folder..."
rm -rf ${AK2}/{kernel,treble-*}/*

# Copy kernel image and DTB
echo " - Copying kernel image and DTBs to AnyKernel2 folder..."
cp -f ${OUT}/arch/arm64/boot/Image.gz ${AK2}/kernel/
cp -f ${OUT}/arch/arm64/boot/dts/qcom/${DTB}-treble.dtb ${AK2}/treble-supported/${DTB}.dtb
cp -f ${OUT}/arch/arm64/boot/dts/qcom/${DTB}-nontreble.dtb ${AK2}/treble-unsupported/${DTB}.dtb

# End script
echo " - That's it. Job well done!"
tg_sendinfo "${MSG} Completed!"

# TODO: Pack the kernel? How?
