#!/usr/bin/env bash
# shellcheck disable=SC1004
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

# TODO: Proper build script, this is made solely for mido kernel build for now

# Text styles
BLD=$(tput bold)
RST=$(tput sgr0)

## Variables

function set_variables {
    # Import Telegram bot token & chat ID
    SCRIPTDIR=${HOME}/KudProject/scripts
    TOKEN=$(cat "${SCRIPTDIR}"/tg_token)
    CHATID=$(< "${SCRIPTDIR}"/tg_chatid head -n 1 -c 14)

    # Default message for posting
    MSG="KudKernel build:"

    # Number of threads used
    THREADS=$(nproc --all)

    # GCC and Clang (if used)
    GCCPREFIX=/opt/kud/aarch64-linux-gnu/bin/aarch64-linux-gnu-
    [[ -n ${CLANG} ]] && \
        CLANGPATH=/opt/kud/flash-clang-7.x/bin/clang

    # Kernel build variables
    AK2=${HOME}/KudProject/AnyKernel2
    ARCH=arm64
    DTB=msm8953-qrd-sku3-mido
    NAME=KudKernel-mido
    OUT=$(pwd)/../build/mido
}

## Functions

# Prints a message with a dash
function info {
    if [[ ${#} -eq 2 ]]; then
        # ${2} are escapes
        echo -e "- ${1}" "${2}"
    else
        echo "- ${1}"
    fi
}

# Post a message to a Telegram chat
function tg_post {
    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage \
         -d text="$(for POST in "${@}"; do echo "${POST}"; done)" \
         -d chat_id="${CHATID}" >> /dev/null
}

# In case of signal interrupt, post interruption notification and exit script
trap '{
    tg_post "${MSG} Interrupted - Signal Interrupt" \
            "@krasCGQ Y u do dis ?? >_<"
    exit 130
}' INT

# For any errors, no matter what, post error notification and exit script
function tg_error {
    tg_post "${MSG} Interrupted - Build Error(s)" \
            "@krasCGQ check console desu !! >_<"

    if [[ -n ${STATUS} ]]; then
        exit "${STATUS}"
    else
        exit 1
    fi
}

# Prints message to stderr and exit script, OR call tg_error function
function die {
    [[ -n ${STATUS} ]] && \
        STATUS=${?}

    echo "! ${1}" >&2

    if [[ -n ${STARTED} ]]; then
        tg_error
    else
        exit 1
    fi
}

# Whenever script fails, save exit status and run tg_error
trap '{
    [[ -n ${STARTED} ]] && \
        STATUS=${?}

    tg_error
}' ERR

## Commands

# Parse parameters
if [[ ${#} -ge 1 ]]; then
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            -c|--compiler)
                # Only Clang or GCC is supported
                shift
                if [[ ${1,,} == clang ]]; then
                    CLANG=true
                elif [[ ${1,,} == gcc ]]; then
                    # Do nothing
                    echo -n
                else
                    die "Invalid parameter specified!"
                fi ;;
            *)
                die "Invalid option(s) specified!" ;;
        esac

        shift
    done
else
    die "No option specified!"
fi

# Set all required variables
set_variables

# Run this inside kernel source
[[ ! -f Makefile || ! -d kernel ]] && \
    die "Please run this script inside kernel source folder!"

# Unset these variables if they're set
for VAR in CROSS_COMPILE CC; do
    [[ -n ${VAR} ]] && \
        unset ${VAR}
done

# Sanity checks
info "Running sanity checks..."
sleep 1

for VAR in ${GCCPREFIX}gcc ${CLANGPATH}; do
    ! find ${VAR} > /dev/null 2>&1 && \
        die "${BLD}$(basename "${VAR}")${RST} doesn't exist in defined path."
done

[[ ! -d ${AK2} ]] && \
    die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

# Begin script
tg_post "${MSG} Started!"
info "Starting build script..."
sleep 1

# Explicitly declare build script startup
STARTED=true

# Always use ccache for faster compiling if exists in PATH
if [[ -n $(command -v ccache) ]]; then
    [[ -n ${CLANG} ]] && \
        CC+="ccache " || \
        CROSS_COMPILE+="ccache "
fi

# Append (or set) CROSS_COMPILE
CROSS_COMPILE+=${GCCPREFIX}

# If Clang is used
if [[ -n ${CLANG} ]]; then
    # Additionally also append (or set) CC
    CC+=${CLANGPATH}

    # Export custom compiler string
    KBUILD_COMPILER_STRING=$("${CLANGPATH}" --version | head -n 1 | perl -pe 's/\(git.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
    export KBUILD_COMPILER_STRING
fi

# Clean build directory
info "Cleaning build directory..."
# TODO: Completely clean build?
make ARCH=${ARCH} O="${OUT}" clean > /dev/null

# TODO: Generate defconfig if it doesn't exist

# Let's build the kernel!
info "Building kernel..."
if [[ -n ${CLANG} ]]; then
    make ARCH=${ARCH} O="${OUT}" CC="${CC}" CROSS_COMPILE=${CROSS_COMPILE} \
         -j"${THREADS}" > /dev/null
else
    make ARCH=${ARCH} O="${OUT}" CROSS_COMPILE="${CROSS_COMPILE}" \
         -j"${THREADS}" > /dev/null
fi

# Clean AnyKernel2 directory
info "Cleaning up AnyKernel2 folder..."
rm -rf "${AK2}"/{kernel,{,non}treble}/*

# Copy kernel image and DTB
info "Copying kernel image and DTBs to AnyKernel2 folder..."
cp -f "${OUT}"/arch/arm64/boot/Image.gz "${AK2}"/kernel/
for VAR in {,non}treble; do
    cp -f "${OUT}"/arch/arm64/boot/dts/qcom/${DTB}-${VAR}.dtb "${AK2}"/${VAR}/${DTB}.dtb
done

# Export here to be picked later
DATE=$(date +%s)

# Make flashable kernel zip
info "Creating ${NAME}-${DATE}.zip..."
(
    cd "${AK2}" || \
        die "${BLD}$(basename "${AK2}")${RST} doesn't exist in defined path."

    # TODO: Signed flashable zip
    zip -qr9 ${NAME}-"${DATE}".zip ./* -x README.md -x ./*.zip
)

# End script
info "That's it. Job well done!" '\a'
tg_post "${MSG} Completed!"
