#!/usr/bin/env bash
# A script to automatically update and apply patches for crosstool-ng.
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

## Text styles
BLD=$(tput bold)
RST=$(tput sgr0)

## Abort script when something went wrong
function error {
    STATUS=${?}
    echo "${BLD}! Failed to patch selected projects.${RST}"
    exit ${STATUS}
}
trap error ERR

## Modify these variables accordingly
function variables_list {
    SRCDIR="${HOME}/tc/git"
    CTDIR="${HOME}/src/ct-ng/packages"
}

## List of projects
# In order:
# 1) Location of git-cloned source
# 2) Branch that we need to grab upstream changes from
# 3) Location of package patches folder within ct-ng source
# 4) Patches that we'd like to exclude; must be separated by vertical bar
function projects_list {
    ## GNU GCC
    GNUDIR="${SRCDIR}/gnu"
    GNUBRANCH="gcc-8-branch"
    GNUPATCH="${CTDIR}/gcc/8.1.0"
    GNUEXCL="0018"

    ## Linaro GCC
    LNRDIR="${SRCDIR}/linaro"
    LNRBRANCH="linaro-local/gcc-7-integration-branch"
    LNRPATCH="${CTDIR}/gcc-linaro/7.2-2017.11"
    LNREXCL=""

    ## GNU Binutils
    BINDIR="${SRCDIR}/binutils"
    BINBRANCH="master"
    BINPATCH="${CTDIR}/binutils/2.30"
    BINEXCL=""
}

## Usage: update_projects "<src-dir>" "<src-branch>" "<patch-dir>"
function update_projects {
    ## Enter source directory
    cd "${1}" || error

    ## Fetch updates from upstream
    git fetch origin "${2}" --depth=1 2> /dev/null

    ## Hard reset current tree to latest source
    git reset --hard FETCH_HEAD > /dev/null

    ## Clean them up as we can make mess with them at some point
    git clean -dfx > /dev/null

    ## Fetch list of patches that we're going to apply
    if [[ ! -z "${4}" ]]; then
        LIST="$(find "${3}" -name "*.patch" | grep -Ev "${4}" | sort -n)"
    else
        LIST="$(find "${3}" -name "*.patch" | sort -n)"
    fi

    ## Notify that project patching is about to begin
    echo "- Patching $(basename "${1}")..."

    ## Apply crosstool-ng patches
    for PATCH in ${LIST}; do
        # Output patch name
        # echo "  - Applying patch $(basename "${PATCH}" | cut -d '-' -f 1 | tail -c 5)..."

        # Apply every patches with merge strategy
        patch --merge -N -s -p1 -i "${PATCH}"
    done

    ## Remove .orig files
    rm -f "$(find . -name "*.orig")"

    ## Go back to dir where this script is run
    # Disable shellcheck SC2164 warning as in no way this will fail.
    # shellcheck disable=SC2164
    cd - > /dev/null
}

variables_list
projects_list
update_projects "${GNUDIR}" "${GNUBRANCH}" "${GNUPATCH}" "${GNUEXCL}"
update_projects "${LNRDIR}" "${LNRBRANCH}" "${LNRPATCH}" "${LNREXCL}"
update_projects "${BINDIR}" "${BINBRANCH}" "${BINPATCH}" "${BINEXCL}"
echo "${BLD}i Projects updated successfully.${RST}"
