#!/usr/bin/env bash
# A script to automatically update and apply patches for crosstool-ng.
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later

## Import common environment script
# shellcheck source=/dev/null
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/env/common

## Functions

# Abort script when something went wrong
function die {
    STATUS=${?}
    [[ -z ${VERBOSE} ]] && \
        exec 1>&5 2>&6 1> /dev/stdout 2> /dev/stderr
    warn "Failed to patch selected projects."
    exit ${STATUS}
}
trap die ERR

# Modify these variables accordingly
function variables_list {
    SRCDIR="${HOME}/tc/git"
    CTDIR="${HOME}/src/ct-ng/packages"
}

# List of projects (in order):
# 1) Location of git-cloned source
# 2) Branch that we need to grab upstream changes from
# 3) Location of package patches folder within ct-ng source
# 4) Patches that we'd like to exclude; must be separated by vertical bar
function projects_list {
    # GNU GCC
    GNUDIR="${SRCDIR}/gnu"
    GNUBRANCH="gcc-8-branch"
    GNUPATCH="${CTDIR}/gcc/8.2.0"
    GNUEXCL="0006|0010"

    # Linaro GCC
    LNRDIR="${SRCDIR}/linaro"
    LNRBRANCH="linaro-local/gcc-7-integration-branch"
    LNRPATCH="${CTDIR}/gcc-linaro/7.3-2018.05"
    LNREXCL=""

    # GNU Binutils
    BINDIR="${SRCDIR}/binutils"
    BINBRANCH="master"
    BINPATCH="${CTDIR}/binutils/2.31.1"
    BINEXCL="0009|0010"
}

# Usage: update_projects "<src-dir>" "<src-branch>" "<patch-dir>"
function update_projects {
    # Be quiet
    [[ -z ${VERBOSE} ]] && \
        exec 5>&1 6>&2 &> /dev/null

    # Enter source directory
    cd "${1}" || die

    if [[ $(pwd) != ${GNUDIR} ]]; then
        # Fetch updates from upstream
        git fetch origin "${2}" --depth=1

        # Hard reset current tree to latest source
        git reset --hard FETCH_HEAD
    else
        # Workaround failing patches for GNU GCC 8.2.1
        git reset --hard
        git fetch upstream "${2}"
        git rebase upstream/"${2}"
    fi

    # Clean them up as we can make mess with them at some point
    git clean -dfx

    # Fetch list of patches that we're going to apply
    if [[ ! -z "${4}" ]]; then
        LIST="$(find "${3}" -name "*.patch" | grep -Ev "${4}" | sort -n)"
    else
        LIST="$(find "${3}" -name "*.patch" | sort -n)"
    fi

    # Stops here temporarily
    [[ -z ${VERBOSE} ]] && \
        exec 1>&5 2>&6 1> /dev/stdout 2> /dev/stderr

    # Notify that project patching is about to begin
    info "Patching $(basename "${1}")..."

    # Be quiet (again)
    [[ -z ${VERBOSE} ]] && \
        exec 5>&1 6>&2 &> /dev/null

    # Apply crosstool-ng patches
    for PATCH in ${LIST}; do
        # Output patch name if verbose
        echo "  - Applying patch $(basename "${PATCH}" | cut -d '-' -f 1 | tail -c 5)..."

        # Apply every patches with merge strategy
        patch --merge -N -p1 -i "${PATCH}"
    done

    # Remove .orig files
    rm -f "$(find . -name "*.orig")"

    # Go back to dir where this script is run
    cd - > /dev/null || die

    # Stops here for good
    if [[ -z ${VERBOSE} ]]; then
        exec 1>&5 2>&6 1> /dev/stdout 2> /dev/stderr
    fi
}

## Commands

# Parse parameters
case ${1} in
    -v|--verbose)
        VERBOSE=true ;;
esac

variables_list
projects_list
update_projects "${GNUDIR}" "${GNUBRANCH}" "${GNUPATCH}" "${GNUEXCL}"
update_projects "${LNRDIR}" "${LNRBRANCH}" "${LNRPATCH}" "${LNREXCL}"
update_projects "${BINDIR}" "${BINBRANCH}" "${BINPATCH}" "${BINEXCL}"
info "Projects updated successfully."
