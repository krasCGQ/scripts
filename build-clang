#!/usr/bin/env bash
# shellcheck disable=SC1117
# Clang compilation script
# Copyright (C) 2018 Nathan Chancellor
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later


###############
#             #
#  VARIABLES  #
#             #
###############

# Colors
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"

# Folder that will house the source and build files
MAIN_FOLDER=${HOME}/KudProject/clang

# Folder that will hold the main LLVM source
LLVM_FOLDER=${MAIN_FOLDER}/llvm

# Folder that will hold all of the build files and compiled code
BUILD_FOLDER=${MAIN_FOLDER}/build

# Start tracking time
START=$(date +"%s")

# Number of threads
THREADS=$(nproc --all)

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    exit
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}

function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            "-b"|"--build-only")
                BUILD_ONLY=true ;;

            "-d"|"--date")
                shift && enforce_value "${@}"
                DATE_OFFSET=${1} ;;

            "-i"|"--install-folder")
                shift && enforce_value "${@}"
                INSTALL_FOLDER=${1} ;;

            "-S"|"--stock")
                STOCK=true ;;

            "-s"|"--stable")
                VERSION=6 ;;

            "-T"|"--test")
                TEST=true ;;

            "-u"|"--update-only")
                UPDATE_ONLY=true ;;

            "-v"|"--vendor")
                shift && enforce_value "${@}"
                VENDOR=${1} ;;

            *) die "Invalid parameter specified!" ;;
        esac

        shift
    done

    # Clang 7.x is compiled by default
    [[ -z ${VERSION} ]] && VERSION=7

    # Folder that will hold the final compiled toolchain
    [[ -z ${INSTALL_FOLDER} ]] && INSTALL_FOLDER=/opt/kud/${VENDOR:+"${VENDOR,,}-"}clang-${VERSION}.x${TEST:+"-test"}

    # SVN copy of the LLVM folder for revisioning
    SVN_FOLDER=${MAIN_FOLDER}/svn-${VERSION}.x

    # Set compiler
    CC=$(command -v clang || command -v gcc)
    CXX=$(command -v clang++ || command -v g++)
    [[ -z ${CC} || -z ${CXX} ]] && die "Neither GCC nor Clang could be found on your system!"
}


# Rolls back a repo based on a certain date
function rollback() {
    if [[ -n ${DATE_OFFSET} ]]; then
        git checkout "$(git log -1 --format=%H --before="$(date --date="-${DATE_OFFSET} day")")"
        if [[ -z ${STOCK} ]]; then
            if [[ ${FOLDER} = "llvm" && ${VERSION} = 6 ]]; then
                git cherry-pick 64e3da64729e
            elif [[ ${FOLDER} = "clang" ]]; then
                if [[ ${VERSION} -eq 6 ]]; then
                    git cherry-pick a095082d10de
                else
                    git cherry-pick d049e5088911
                fi
            fi
        fi
    fi
}


# Sync a git project
function git_sync() {(
    FOLDER=${1}

    # binutils uses another URL/branch scheme
    if [[ ${FOLDER} =~ "binutils" ]]; then
        URL=git://git.linaro.org/toolchain/binutils-gdb
        BRANCH=master
    else
        # Set URL based on folder
        URL_PREFIX=git://github.com/
        LLVM_ORG=${URL_PREFIX}llvm-mirror/
        case ${FOLDER} in
            "clang"|"llvm")
                URL=${URL_PREFIX}nathanchance/$(basename "${FOLDER}") ;;
            *)
                URL=${LLVM_ORG}$(basename "${FOLDER}") ;;
        esac

        # Set branch based on version
        case ${VERSION} in
            "7") BRANCH=master ;;
            *) BRANCH="release_${VERSION}0" ;;
        esac
    fi

    # If folder doesn't exist, we need to clone it
    [[ ! -d ${FOLDER} ]] && git clone "${URL}" -b "${BRANCH}" "${FOLDER}"

    cd "${FOLDER}" || die "Error moving into ${FOLDER}"

    git clean -fxdq

    # If checking out a branch fails, it's because 'origin/<branch>' and 'upstream/<branch>' exist
    git checkout ${BRANCH} || git checkout -b ${BRANCH} origin/${BRANCH}

    # For Clang and LLVM, we need to add an upstream remote and rebase on it
    if [[ ${FOLDER} = "clang" || ${FOLDER} = "llvm" ]]; then
        add_remote upstream "${LLVM_ORG}$(basename "${FOLDER}")"
        git fetch upstream
        if [[ -n ${STOCK} ]]; then
            git reset --hard upstream/"${BRANCH}"
        else
            git reset --hard origin/"${BRANCH}"
            git rebase upstream/"${BRANCH}"
        fi
    else
        git pull
    fi

    # Rold back if necessary
    rollback
)}


# Syncs a svn project
function svn_sync() {(
    FOLDER=${1}

    case ${VERSION} in
        "7") URL_PREFIX=trunk ;;
        *) URL_PREFIX=branches/"${BRANCH}" ;;
    esac

    if [[ ! -d ${FOLDER} ]]; then
        svn co "https://llvm.org/svn/llvm-project/llvm/${URL_PREFIX}" "${FOLDER}"
    else
        cd "${FOLDER}" || die "Error moving into ${FOLDER}"
        svn update
    fi
)}


# Syncs all necessary projects
function sync_all() {
    header "Syncing projects"

    mkdir -p "${MAIN_FOLDER}"
    cd "${MAIN_FOLDER}" || die "Error creating ${MAIN_FOLDER}!"

    git_sync llvm
    svn_sync "$(basename "${SVN_FOLDER}")"

    mkdir -p "${LLVM_FOLDER}/tools"
    cd "${LLVM_FOLDER}/tools" || die "Error creating tools folder!"

    git_sync binutils
    git_sync clang
    git_sync lld
    git_sync polly

    mkdir -p "${LLVM_FOLDER}/projects"
    cd "${LLVM_FOLDER}/projects" || die "Error creating projects folder!"

    git_sync compiler-rt
    git_sync libcxx
    git_sync libcxxabi
    git_sync libunwind
    git_sync openmp

    [[ -n ${UPDATE_ONLY} ]] && exit
}


# Removes any previous build files
function cleanup() {
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}


# Build the toolchain
function build() {
    header "Building Clang"

    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_C_FLAGS="-O3 -pthread -fopenmp -march=native" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_CXX_FLAGS="-O3 -pthread -fopenmp -march=native" \
          -DLLVM_ENABLE_PIC=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_PARALLEL_COMPILE_JOBS="${THREADS}" \
          -DLLVM_PARALLEL_LINK_JOBS="${THREADS}" \
          -DLLVM_LIBDIR_SUFFIX=64 \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_BINUTILS_INCDIR="${LLVM_FOLDER}/tools/binutils/include" \
          -DLLVM_TARGETS_TO_BUILD="AArch64" \
          -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-unknown-linux-gnu \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_USE_LINKER=gold \
          -DCLANG_VENDOR="${VENDOR:+"${VENDOR} "}" \
          -DLLVM_VERSION_PATCH="$(cd "${SVN_FOLDER}" || die "SVN folder doesn't exist";
                                  svn info -r HEAD --show-item revision)" \
          -DLLVM_VERSION_SUFFIX="" \
          "${LLVM_FOLDER}"

    time ninja && SUCCESS=true
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if [[ -n ${SUCCESS} ]]; then
        VERSION_STRING=$("${BUILD_FOLDER}"/bin/clang --version | head -1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
        header "SUCCESS!" "${GRN}"
        echo "${BOLD}Time elapsed:${RST} ${TIME_STRING,,}"
        echo
        echo "${BOLD}Version string:${RST} ${VERSION_STRING}"
        echo
    else
        header "ERROR BUILDING!"
        display_error "Time elapsed: ${TIME_STRING,,}"
        exit
    fi

    [[ -n ${BUILD_ONLY} ]] && exit
}


# Install the toolchain
function install() {
    if [[ -z ${TEST} ]]; then
        rm -rf "${INSTALL_FOLDER}-old"
        mv "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old"
    fi

    if ! ninja install &>/dev/null; then
        header "ERROR INSTALLING!"
        exit
    fi

    echo "${BOLD}Installation location:${RST} ${INSTALL_FOLDER}"
    echo
}


parse_parameters "${@}"
sync_all
cleanup
build
install
