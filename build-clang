#!/usr/bin/env bash
# Clang compilation script
# Copyright (C) 2018 Nathan Chancellor
# Copyright (C) 2018 Albert I (krasCGQ)
# SPDX-License-Identifier: GPL-3.0-or-later


###############
#             #
#  VARIABLES  #
#             #
###############

# Colors
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"

# Folder that will house the source and build files
MAIN_FOLDER=${HOME}/KudProject/clang

# Folder that will hold the main LLVM source
LLVM_FOLDER=${MAIN_FOLDER}/llvm

# Folder that will hold all of the build files and compiled code
BUILD_FOLDER=${MAIN_FOLDER}/build

# Start tracking time
START=$(date +"%s")

# Number of threads
THREADS=$(nproc --all)

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    exit
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            "-b"|"--build-only")
                BUILD_ONLY=true ;;

            "-v"|"--version")
                shift && enforce_value "${@}"
                VERSION=${1} ;;

            *) die "Invalid parameter specified!" ;;
        esac

        shift
    done

    # Clang 7.x is compiled by default
    if [[ -z ${VERSION} ]]; then
        VERSION=7
    fi

    # Folder that will hold the final compiled toolchain
    INSTALL_FOLDER=/opt/kud/flash-clang-${VERSION}.x

    # SVN copy of the LLVM folder for revisioning
    SVN_FOLDER=${MAIN_FOLDER}/svn-${VERSION}.x
}

# Syncs requested  projects
function sync() {
    FOLDER=${1}

    if [[ ${FOLDER} =~ "binutils" ]]; then
        URL=git://git.linaro.org/toolchain/binutils-gdb
        BRANCH=master
    elif [[ ${FOLDER} =~ "svn" ]]; then
        case ${VERSION} in
            "7") URL=https://llvm.org/svn/llvm-project/llvm/trunk ;;
            *) URL=https://llvm.org/svn/llvm-project/llvm/branches/"release_${VERSION}0" ;;
        esac
    else
        URL=git://github.com/llvm-mirror/$(basename "${FOLDER}")
        case ${VERSION} in
            "7") BRANCH=master ;;
            *) BRANCH="release_${VERSION}0" ;;
        esac
    fi

    if [[ ! -d ${FOLDER} ]]; then
        case ${FOLDER} in
            *svn*) svn co "${URL}" "${FOLDER}" ;;
            *) git clone "${URL}" -b "${BRANCH}" "${FOLDER}" ;;
        esac
    else
        (
            cd "${FOLDER}" || die "Error moving into ${FOLDER}"
            case ${FOLDER} in
                *svn*)
                    svn update ;;
                *)
                    git clean -fxdq
                    git checkout ${BRANCH}
                    git fetch origin
                    if ! git rebase origin/${BRANCH}; then
                        die "Error updating $(basename "${FOLDER}")!"
                    fi ;;
            esac
        )
    fi
}

# Syncs all necessary projects
function sync_all() {
    header "Syncing projects"

    mkdir -p "${MAIN_FOLDER}"
    cd "${MAIN_FOLDER}" || die "Error creating ${MAIN_FOLDER}!"

    sync llvm
    sync "$(basename "${SVN_FOLDER}")"

    mkdir -p "${LLVM_FOLDER}/tools"
    cd "${LLVM_FOLDER}/tools" || die "Error creating tools folder!"

    sync binutils
    sync clang
    sync lld
    sync polly

    mkdir -p "${LLVM_FOLDER}/projects"
    cd "${LLVM_FOLDER}/projects" || die "Error creating projects folder!"

    sync compiler-rt
    sync libcxx
    sync libcxxabi
    sync libunwind
    sync openmp
}

# Removes any previous build files
function cleanup() {
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}

# Build the toolchain
function build() {
    header "Building Clang"

    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_C_COMPILER=/usr/lib/ccache/bin/clang \
          -DCMAKE_C_FLAGS="-O3 -pthread -fopenmp -march=native" \
          -DCMAKE_CXX_COMPILER=/usr/lib/ccache/bin/clang++ \
          -DCMAKE_CXX_FLAGS="-O3 -pthread -fopenmp -march=native" \
          -DLLVM_ENABLE_PIC=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_PARALLEL_COMPILE_JOBS="${THREADS}" \
          -DLLVM_PARALLEL_LINK_JOBS="${THREADS}" \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_BINUTILS_INCDIR="${LLVM_FOLDER}/tools/binutils/include" \
          -DLLVM_TARGETS_TO_BUILD="AArch64" \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_USE_LINKER=gold \
          -DCLANG_VENDOR="Flash " \
          -DLLVM_VERSION_PATCH="$(cd "${SVN_FOLDER}" || die "SVN folder doesn't exist";
                                  svn info -r HEAD --show-item revision)" \
          -DLLVM_VERSION_SUFFIX="" \
          "${LLVM_FOLDER}"

    if ! time ninja; then
        header "ERROR BUILDING!"
        die "Time elapsed: $(format_time "${START}" "$(date +"%s")")"
    fi
}

# Install the toolchain
function install() {
    header "Installing Clang"

    rm -rf "${INSTALL_FOLDER}-old"
    mv "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old"
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if ! ninja install; then
        header "ERROR INSTALLING!"
        die "Time elapsed: ${TIME_STRING,,}"
    fi

    header "SUCCESS!" "${GRN}"
    echo "${GRN}Successfully built and installed Clang toolchain to ${INSTALL_FOLDER}!${GRN}"
    echo "${GRN}Time elapsed: ${TIME_STRING,,}${RST}\n"
}

parse_parameters "${@}"
sync_all
cleanup
build
[[ ! ${BUILD_ONLY} ]] && install
