#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Copyright (C) 2018 Albert I (krasCGQ)
#
# Clang compilation script


###############
#             #
#  VARIABLES  #
#             #
###############

# Folder that will house the source and build files
MAIN_FOLDER=${HOME}/clang-build

# Folder that will hold the main LLVM source
LLVM_FOLDER=${MAIN_FOLDER}/llvm

# Folder that will hold all of the build files and compiled code
BUILD_FOLDER=${MAIN_FOLDER}/build

# Start tracking time
START=$(date +"%s")

# Easy to use version variables
STABLE_VERSION=7
MASTER_VERSION=8

# Set ME variable if on my server
[[ $(uname -n) = "flashbox" ]] && ME=true

###############
#             #
#  FUNCTIONS  #
#             #
###############

function parse_parameters() {
    PARAMS="${*}"

    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            "-B"|"--bootstrap")
                if [[ -n ${ME} ]]; then
                    for FLASH_VERSION in ${STABLE_VERSION} ${MASTER_VERSION}; do
                        [[ -d ${TC_FOLDER}/flash-clang-${FLASH_VERSION}.x ]] && \
                            export PATH="${TC_FOLDER}/flash-clang-${FLASH_VERSION}.x/bin:${PATH}"
                    done
                fi ;;

            "-b"|"--build-only")
                BUILD_ONLY=true ;;

            "-d"|"--date")
                shift && enforce_value "${@}"
                DATE_OFFSET=${1} ;;

            "-I"|"--install-only")
                INSTALL_ONLY=true ;;

            "-i"|"--install-folder")
                shift && enforce_value "${@}"
                INSTALL_FOLDER=${1} ;;

            "-S"|"--stock")
                STOCK=true ;;

            "-s"|"--stable")
                VERSION=${STABLE_VERSION} ;;

            "-T"|"--test")
                TEST=true ;;

            "-t"|"--telegram")
                TG=true
                TG_MSG_FILE=$(mktemp)
                trap 'rm -f "${TG_MSG_FILE}"' EXIT ;;

            "-u"|"--update-only")
                UPDATE_ONLY=true ;;

            "-v"|"--vendor")
                shift && enforce_value "${@}"
                VENDOR=${1} ;;

            *) die "Invalid parameter specified!" ;;
        esac

        shift
    done

    if [[ -n ${TG} ]]; then
        {
            echo "\`\`\`"
            echo "Currently executing..."
            echo
            echo "$(basename "${0}") ${PARAMS}"
            echo "\`\`\`"
        } > "${TG_MSG_FILE}"
        notify "$(cat "${TG_MSG_FILE}")"
    fi

    # The master branch is compiled by default
    [[ -z ${VERSION} ]] && VERSION=${MASTER_VERSION}

    # Folder that will hold the final compiled toolchain
    [[ -z ${INSTALL_FOLDER} ]] && INSTALL_FOLDER=${TC_FOLDER}/${VENDOR:+"${VENDOR,,}-"}clang-${VERSION}.x${TEST:+"-test"}

    # SVN copy of the LLVM folder for revisioning
    SVN_FOLDER=${MAIN_FOLDER}/svn-${VERSION}.x

    # Set compiler
    CC=$(command -v clang || command -v gcc)
    CXX=$(command -v clang++ || command -v g++)
    [[ -z ${CC} || -z ${CXX} ]] && die "Neither GCC nor Clang could be found on your system!"
}


# Rolls back a repo based on a certain date
function rollback() {
    if [[ -n ${DATE_OFFSET} ]]; then
        git checkout "$(git log -1 --format=%H --before="$(date --date="-${DATE_OFFSET} day")")" || die "There was an error rolling back ${FOLDER}!"
        if [[ -z ${STOCK} && ${FOLDER} = "clang" ]]; then
            if [[ ${VERSION} -eq ${STABLE_VERSION} ]]; then
                git cherry-pick 24c9731717 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 513f3b3fb7 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick eab6ce7dc6 || die "There was an error rolling back ${FOLDER}!"
            else
                git cherry-pick 24c9731717 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 176213e989 || die "There was an error rolling back ${FOLDER}!"
                git cherry-pick 382ac69d5e || die "There was an error rolling back ${FOLDER}!"
            fi
        fi
    fi
}


# Sync a git project
function git_sync() {(
    FOLDER=${1}

    # binutils uses another URL/branch scheme
    if [[ ${FOLDER} =~ "binutils" ]]; then
        URL=https://sourceware.org/git/binutils-gdb.git
        # SC2030: Modification of BRANCH is local (to subshell caused by (..) group).
        # shellcheck disable=SC2030
        BRANCH=master
    else
        # Set URL based on folder
        case ${FOLDER} in
            "clang")
                [[ -n ${ME} ]] && URL_PREFIX=git@github.com: || URL_PREFIX=https://github.com/
                URL=${URL_PREFIX}nathanchance/$(basename "${FOLDER}").git ;;
            "extra")
                URL=${LLVM_ORG}clang-tools-extra ;;
            *)
                URL=${LLVM_ORG}$(basename "${FOLDER}") ;;
        esac
    fi

    # If folder doesn't exist, we need to clone it
    if [[ ! -d ${FOLDER} ]]; then
        git clone "${URL}" -b "${BRANCH}" "${FOLDER}" || die "Error cloning ${FOLDER}!"
    fi

    cd "${FOLDER}" || die "Error moving into ${FOLDER}"

    git clean -fxdq

    # If checking out a branch fails, it's because 'origin/<branch>' and 'upstream/<branch>' exist
    git checkout ${BRANCH} || git checkout -b ${BRANCH} origin/${BRANCH}

    # For Clang, we need to add an upstream remote and rebase on it
    if [[ ${FOLDER} = "clang" ]]; then
        add_remote upstream "${LLVM_ORG}$(basename "${FOLDER}")"
        git fetch upstream
        if [[ -n ${STOCK} ]]; then
            git reset --hard upstream/"${BRANCH}"
        else
            git reset --hard origin/"${BRANCH}"
            git rebase upstream/"${BRANCH}" || die "There was an error rebasing ${FOLDER}!"
            [[ -n ${ME} ]] && git push -f
        fi
    else
        git fetch origin || die "There was an error fetching updates for ${FOLDER}!"
        git reset --hard origin/"${BRANCH}" || die "There was an error updating ${FOLDER}!"
    fi

    # Roll back if necessary
    rollback
) || exit 1; }


# Syncs a svn project
function svn_sync() {
    FOLDER=${1}

    # SC2031: BRANCH was modified in a subshell. That change might be lost.
    # shellcheck disable=SC2031
    case ${VERSION} in
        ${MASTER_VERSION}) URL_SUFFIX=trunk ;;
        *) URL_SUFFIX=branches/"${BRANCH}" ;;
    esac

    if [[ ! -d ${FOLDER} ]]; then
        svn co "https://llvm.org/svn/llvm-project/llvm/${URL_SUFFIX}" "${FOLDER}" || die "There was an error syncing ${FOLDER}!"
    else
        cd "${FOLDER}" || die "Error moving into ${FOLDER}"
        svn update || die "There was an error updating ${FOLDER}!"
    fi

    LLVM_VERSION_PATCH=$(svn info -r HEAD --show-item revision)
}


# Syncs all necessary projects
function sync_all() {
    header "Syncing projects"

    mkdir -p "${MAIN_FOLDER}"
    cd "${MAIN_FOLDER}" || die "Error creating ${MAIN_FOLDER}!"

    # Set branch based on version
    case ${VERSION} in
        ${MASTER_VERSION}) BRANCH=master ;;
        *) BRANCH="release_${VERSION}0" ;;
    esac

    # Define the git URL for global use
    LLVM_ORG=https://git.llvm.org/git/

    git_sync llvm
    svn_sync "$(basename "${SVN_FOLDER}")"

    mkdir -p "${LLVM_FOLDER}/tools"
    cd "${LLVM_FOLDER}/tools" || die "Error creating tools folder!"

    git_sync binutils
    git_sync clang
    git_sync lld
    git_sync polly

    mkdir -p "${LLVM_FOLDER}/projects"
    cd "${LLVM_FOLDER}/projects" || die "Error creating projects folder!"

    git_sync compiler-rt
    git_sync libcxx
    git_sync libcxxabi
    git_sync libunwind
    git_sync openmp

    mkdir -p "${LLVM_FOLDER}/tools/clang/tools"
    cd "${LLVM_FOLDER}/tools/clang/tools" || die "Error creating tools folder!"

    git_sync extra

    [[ -n ${UPDATE_ONLY} ]] && exit
}


# Removes any previous build files
function cleanup() {
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}


# Build the toolchain
function build() {
    header "Building Clang"

    [[ -n ${TG} ]] && notify "\`Beginning build of Clang ${VERSION}...\`"

    [[ -n ${STOCK} ]] && URL_PREFIX=${LLVM_ORG} || URL_PREFIX=https://github.com/nathanchance/

    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_C_FLAGS="-O3 -march=native -mtune=native" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_CXX_FLAGS="-O3 -march=native -mtune=native" \
          -DLLVM_CCACHE_BUILD=ON \
          -DLLVM_ENABLE_PIC=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_PARALLEL_COMPILE_JOBS="${THREADS}" \
          -DLLVM_PARALLEL_LINK_JOBS="${THREADS}" \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_BINUTILS_INCDIR="${LLVM_FOLDER}/tools/binutils/include" \
          -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_USE_LINKER=gold \
          -DCLANG_VENDOR="${VENDOR:+"${VENDOR} "}" \
          -DLLVM_VERSION_PATCH="${LLVM_VERSION_PATCH:?}" \
          -DLLVM_VERSION_SUFFIX="" \
          -DCLANG_REPOSITORY_STRING="${URL_PREFIX}clang" \
          "${LLVM_FOLDER}" || die "There was an error running cmake!"

    time ninja && SUCCESS=true
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if [[ -n ${SUCCESS} ]]; then
        VERSION_STRING=$(clang_version "${BUILD_FOLDER}"/bin/clang)
        if [[ -n ${TG} ]]; then
            {
                echo "\`\`\`"
                echo "Clang ${VERSION} build was successful!"
                echo
                echo "Time elapsed: ${TIME_STRING,,}"
                echo
                echo "Version string: ${VERSION_STRING}"
                echo "\`\`\`"
            } > "${TG_MSG_FILE}"
            notify "$(cat "${TG_MSG_FILE}")"
        fi
        header "SUCCESS!" "${GRN}"
        echo "${BOLD}Time elapsed:${RST} ${TIME_STRING,,}"
        echo
        echo "${BOLD}Version string:${RST} ${VERSION_STRING}"
        echo
    else
        if [[ -n ${TG} ]]; then
            {
                echo "\`\`\`"
                echo "Error while building Clang ${VERSION}!"
                echo
                echo "Time elapsed: ${TIME_STRING,,}"
                echo "\`\`\`"
            } > "${TG_MSG_FILE}"
            notify "$(cat "${TG_MSG_FILE}")"
        fi
        header "ERROR BUILDING!"
        display_error "Time elapsed: ${TIME_STRING,,}"
        exit
    fi

    [[ -n ${BUILD_ONLY} ]] && exit
}


# Install the toolchain
function install() {
    if [[ -z ${TEST} ]]; then
        rm -rf "${INSTALL_FOLDER}-old"
        cp -r "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old" 2>/dev/null
    fi

    if ! ninja install &>/dev/null; then
        header "ERROR INSTALLING!"
        exit
    fi

    echo "${BOLD}Installation location:${RST} ${INSTALL_FOLDER}"
    echo
}


# Wrapper for syncing and building to minimize boilerplate if in
function sync_build() {
    if [[ -n ${INSTALL_ONLY} ]]; then
        cd "${BUILD_FOLDER}" || die "Build folder doesn't exist!"
        echo
        return
    fi
    sync_all
    cleanup
    build
}


source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"
trap 'echo; die "Manually aborted!"' SIGINT SIGTERM
parse_parameters "${@}"
sync_build
install
exit 0
